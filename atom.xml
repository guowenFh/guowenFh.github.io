<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三省吾身丶丶</title>
  
  <subtitle>兴趣遍地都是，专注和持之以恒才是真正稀缺的。</subtitle>
  <link href="http://guowenfh.github.io/atom.xml" rel="self"/>
  
  <link href="http://guowenfh.github.io/"/>
  <updated>2020-03-12T04:04:13.281Z</updated>
  <id>http://guowenfh.github.io/</id>
  
  <author>
    <name>guowenfh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从一个简单功能的实现，谈谈 react 中的逻辑复用进化过程</title>
    <link href="http://guowenfh.github.io/2019/09/17/2019/react-reuse/"/>
    <id>http://guowenfh.github.io/2019/09/17/2019/react-reuse/</id>
    <published>2019-09-17T13:36:00.000Z</published>
    <updated>2020-03-12T04:04:13.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需求：我们现在有一个获取验证码的按钮，需要在点击后禁用，并且在按钮上显示倒计时60秒才可以进行第二次点击。<br>本篇文章通过对这个需求的八种实现方式来讨论在 react 中的逻辑复用的进化过程</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g72uk6zdtqj30k00fxwfe.jpg"></p><p>代码例子放在了 <a href="https://codesandbox.io/s/kind-herschel-l4f9h?fontsize=14">codesandbox</a> 上。</p> <span id="more"></span><h3 id="方案一-使用-setInterval"><a href="#方案一-使用-setInterval" class="headerlink" title="方案一 使用 setInterval"></a>方案一 使用 setInterval</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonInterval</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    btnText: <span class="string">&#x27;获取验证码&#x27;</span>,</span><br><span class="line">    totalSecond: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clear()</span><br><span class="line">  &#125;</span><br><span class="line">  clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      totalSecond: <span class="number">10</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  setTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">if</span> (totalSecond &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.clear()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        totalSecond: totalSecond - <span class="number">1</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  onFetch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      totalSecond: totalSecond - <span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="built_in">this</span>.setTime()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button disabled=&#123;loading&#125; onClick=&#123;<span class="built_in">this</span>.onFetch&#125;&gt;</span><br><span class="line">        &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方案二-使用-setTimeout"><a href="#方案二-使用-setTimeout" class="headerlink" title="方案二 使用 setTimeout"></a>方案二 使用 setTimeout</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    btnText: <span class="string">&#x27;获取验证码&#x27;</span>,</span><br><span class="line">    totalSecond: <span class="number">60</span></span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clear()</span><br><span class="line">  &#125;</span><br><span class="line">  clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      totalSecond: <span class="number">60</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  setTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">if</span> (totalSecond &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.clear()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      totalSecond: totalSecond - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setTime()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  onFetch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    <span class="built_in">this</span>.setTime()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button disabled=&#123;loading&#125; onClick=&#123;<span class="built_in">this</span>.onFetch&#125;&gt;</span><br><span class="line">        &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可能很快就写出来两个这样的组件。使用 setTimeout 还是 setInterval 区别不是特别大。 但是我会更推荐 setTimeout 因为 万物皆递归（逃）</p><p>不过，又有更高的要求了。可以看到刚刚我们的获取验证码。如果说再有一个页面有相同的需求，只能将组件完全再拷贝一遍。这肯定不合适嘛。</p><p>那咋办嘛？</p><h3 id="方案三-参数提取到-Props-1"><a href="#方案三-参数提取到-Props-1" class="headerlink" title="方案三 参数提取到 Props 1"></a>方案三 参数提取到 Props 1</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonProps</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.initState = &#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      btnText: <span class="built_in">this</span>.props.btnText || <span class="string">&quot;获取验证码&quot;</span>,</span><br><span class="line">      totalSecond: <span class="built_in">this</span>.props.totalSecond || <span class="number">60</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.state = &#123; ...this.initState &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clear();</span><br><span class="line">  &#125;</span><br><span class="line">  clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      ...this.initState</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  setTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span> (totalSecond &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.clear();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      totalSecond: totalSecond - <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setTime();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  onFetch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">    <span class="built_in">this</span>.setTime();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button disabled=&#123;loading&#125; onClick=&#123;<span class="built_in">this</span>.onFetch&#125;&gt;</span><br><span class="line">        &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonProps1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LoadingButtonProps</span> <span class="attr">btnText</span>=<span class="string">&#123;</span>&quot;获取验证码<span class="attr">1</span>&quot;&#125; <span class="attr">totalSecond</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonProps2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">LoadingButtonProps</span> <span class="attr">btnText</span>=<span class="string">&#123;</span>&quot;获取验证码<span class="attr">2</span>&quot;&#125; <span class="attr">totalSecond</span>=<span class="string">&#123;20&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;LoadingButtonProps1 /&gt;</span><br><span class="line">    &lt;LoadingButtonProps2 /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于上面的需求，不就是复用嘛，看我 props 提取到公共父组件一把梭搞定！<br>想想好像还挺美的。。</p><p>结果这时候需求变更来了：</p><p>第一点：两个地方获取验证码的api不一样。第二点：我需要在获取验证码之前做一些别的事情</p><p>挠了挠头，那咋办嘛？</p><h3 id="方案四-参数提取到-Props-2"><a href="#方案四-参数提取到-Props-2" class="headerlink" title="方案四 参数提取到 Props 2"></a>方案四 参数提取到 Props 2</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonProps</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// static defaultProps = &#123;</span></span><br><span class="line">  <span class="comment">//   loading: false,</span></span><br><span class="line">  <span class="comment">//   btnText: &#x27;获取验证码&#x27;,</span></span><br><span class="line">  <span class="comment">//   totalSecond: 10,</span></span><br><span class="line">  <span class="comment">//   onStart: () =&gt; &#123;&#125;,</span></span><br><span class="line">  <span class="comment">//   onTimeChange: () =&gt; &#123;&#125;,</span></span><br><span class="line">  <span class="comment">//   onReset: () =&gt; &#123;&#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clear()</span><br><span class="line">  &#125;</span><br><span class="line">  clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">    <span class="built_in">this</span>.props.onReset()</span><br><span class="line">  &#125;</span><br><span class="line">  setTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="built_in">console</span>.error(totalSecond)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.props.totalSecond &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.clear()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.props.onTimeChange()</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setTime()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  onFetch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.loading) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.setTime()</span><br><span class="line">    <span class="built_in">this</span>.props.onStart()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onFetch&#125;</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonProps1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  totalSecond = <span class="number">10</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    btnText: <span class="string">&#x27;获取验证码1&#x27;</span>,</span><br><span class="line">    totalSecond: <span class="built_in">this</span>.totalSecond</span><br><span class="line">  &#125;</span><br><span class="line">  onTimeChange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">totalSecond</span>: totalSecond - <span class="number">1</span> &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  onReset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      totalSecond: <span class="built_in">this</span>.totalSecond</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  onStart = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LoadingButtonProps</span><br><span class="line">        loading=&#123;loading&#125;</span><br><span class="line">        totalSecond=&#123;totalSecond&#125;</span><br><span class="line">        onStart=&#123;<span class="built_in">this</span>.onStart&#125;</span><br><span class="line">        onTimeChange=&#123;<span class="built_in">this</span>.onTimeChange&#125;</span><br><span class="line">        onReset=&#123;<span class="built_in">this</span>.onReset&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;button disabled=&#123;loading&#125;&gt;</span><br><span class="line">          &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/LoadingButtonProps&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonProps2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  totalSecond = <span class="number">15</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    btnText: <span class="string">&#x27;获取验证码2&#x27;</span>,</span><br><span class="line">    totalSecond: <span class="built_in">this</span>.totalSecond</span><br><span class="line">  &#125;</span><br><span class="line">  onTimeChange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">totalSecond</span>: totalSecond - <span class="number">1</span> &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  onReset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      totalSecond: <span class="built_in">this</span>.totalSecond</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  onStart = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LoadingButtonProps</span><br><span class="line">        loading=&#123;loading&#125;</span><br><span class="line">        totalSecond=&#123;totalSecond&#125;</span><br><span class="line">        onStart=&#123;<span class="built_in">this</span>.onStart&#125;</span><br><span class="line">        onTimeChange=&#123;<span class="built_in">this</span>.onTimeChange&#125;</span><br><span class="line">        onReset=&#123;<span class="built_in">this</span>.onReset&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;button disabled=&#123;loading&#125;&gt;</span><br><span class="line">          &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/LoadingButtonProps&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;LoadingButtonProps1 /&gt;</span><br><span class="line">    &lt;LoadingButtonProps2 /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嗯？等等。。所以说这样的操作只共用了时间递归减少的部分吧？好像重复代码有点多哇，感觉和老版本也没什么太大的区别嘛。</p><p>那咋办嘛？</p><h3 id="方案五-试试-HOC"><a href="#方案五-试试-HOC" class="headerlink" title="方案五 试试 HOC"></a>方案五 试试 HOC</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadingButtonHoc</span>(<span class="params">WrappedComponent, initState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(props)</span><br><span class="line">      <span class="built_in">this</span>.initState = initState || &#123;</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        btnText: <span class="string">&#x27;获取验证码&#x27;</span>,</span><br><span class="line">        totalSecond: <span class="number">60</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.state = &#123; ...this.initState &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        ...this.initState</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    setTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">if</span> (totalSecond &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.clear()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        totalSecond: totalSecond - <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setTime()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    onFetch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; loading &#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">if</span> (loading) <span class="keyword">return</span></span><br><span class="line">      <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">      <span class="built_in">this</span>.setTime()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;WrappedComponent</span><br><span class="line">          &#123;...this.props&#125;</span><br><span class="line">          onClick=&#123;<span class="built_in">this</span>.onFetch&#125;</span><br><span class="line">          loading=&#123;loading&#125;</span><br><span class="line">          btnText=&#123;btnText&#125;</span><br><span class="line">          totalSecond=&#123;totalSecond&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonHocComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond, onClick &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button disabled=&#123;loading&#125; onClick=&#123;onClick&#125;&gt;</span><br><span class="line">        &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> LoadingButtonHocComponent1 = loadingButtonHoc(LoadingButtonHocComponent, &#123;</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">  btnText: <span class="string">&#x27;获取验证码Hoc1&#x27;</span>,</span><br><span class="line">  totalSecond: <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> LoadingButtonHocComponent2 = loadingButtonHoc(LoadingButtonHocComponent, &#123;</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">  btnText: <span class="string">&#x27;获取验证码Hoc2&#x27;</span>,</span><br><span class="line">  totalSecond: <span class="number">12</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;LoadingButtonHocComponent1 /&gt;</span><br><span class="line">    &lt;LoadingButtonHocComponent2 /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们使用 高阶组件再次重写了整个逻辑。好像基本上需求都满足了？<br>这个地方思路在于，将 onClick 或者叫做 onStart 事件暴露出来了，最终的执行，<br>都是由外部组件自行决定执行时机，那么其实不管怎么搞都可以了</p><h3 id="方案六-renderProps"><a href="#方案六-renderProps" class="headerlink" title="方案六 renderProps"></a>方案六 renderProps</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonRenderProps</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.initState = &#123;</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      btnText: <span class="built_in">this</span>.props.btnText || <span class="string">&#x27;获取验证码&#x27;</span>,</span><br><span class="line">      totalSecond: <span class="built_in">this</span>.props.totalSecond || <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.state = &#123; ...this.initState &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clear()</span><br><span class="line">  &#125;</span><br><span class="line">  clear = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      ...this.initState</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  setTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">if</span> (totalSecond &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.clear()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      totalSecond: totalSecond - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setTime()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  onFetch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">() =&gt;</span> (&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    <span class="built_in">this</span>.setTime()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; loading, btnText, totalSecond &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.props.children(&#123;</span><br><span class="line">      onClick: <span class="built_in">this</span>.onFetch,</span><br><span class="line">      loading: loading,</span><br><span class="line">      btnText: btnText,</span><br><span class="line">      totalSecond: totalSecond</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonRenderProps1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LoadingButtonRenderProps btnText=&#123;<span class="string">&#x27;获取验证码RP1&#x27;</span>&#125; totalSecond=&#123;<span class="number">15</span>&#125;&gt;</span><br><span class="line">        &#123;<span class="function">(<span class="params">&#123; loading, btnText, totalSecond, onClick &#125;</span>) =&gt;</span> (</span><br><span class="line">          &lt;button disabled=&#123;loading&#125; onClick=&#123;onClick&#125;&gt;</span><br><span class="line">            &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/LoadingButtonRenderProps&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingButtonRenderProps2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LoadingButtonRenderProps btnText=&#123;<span class="string">&#x27;获取验证码RP1&#x27;</span>&#125; totalSecond=&#123;<span class="number">8</span>&#125;&gt;</span><br><span class="line">        &#123;<span class="function">(<span class="params">&#123; loading, btnText, totalSecond, onClick &#125;</span>) =&gt;</span> (</span><br><span class="line">          &lt;button disabled=&#123;loading&#125; onClick=&#123;onClick&#125;&gt;</span><br><span class="line">            &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/LoadingButtonRenderProps&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;LoadingButtonRenderProps1 /&gt;</span><br><span class="line">    &lt;LoadingButtonRenderProps2 /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>嘿嘿，我们使用了 render Props 重写了在 Hoc 上实现的功能。个人角度看，其实比Hoc 会简洁也优雅很多！</p><h3 id="方案七-React-Hooks"><a href="#方案七-React-Hooks" class="headerlink" title="方案七 React Hooks"></a>方案七 React Hooks</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadingButtonHooks</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timeRef = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(props.loading)</span><br><span class="line">  <span class="keyword">const</span> [btnText, setBtnText] = useState(props.btnText)</span><br><span class="line">  <span class="keyword">const</span> [totalSecond, setTotalSecond] = useState(props.totalSecond)</span><br><span class="line">  <span class="keyword">const</span> countRef = useRef(totalSecond)</span><br><span class="line">  <span class="keyword">const</span> clear = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeRef.current)</span><br><span class="line">    setLoading(<span class="literal">false</span>)</span><br><span class="line">    setTotalSecond(props.totalSecond)</span><br><span class="line">    countRef.current = props.totalSecond</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> setTime = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (countRef.current &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      clear()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    countRef.current = countRef.current - <span class="number">1</span></span><br><span class="line">    setTotalSecond(countRef.current)</span><br><span class="line"></span><br><span class="line">    timeRef.current = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setTime()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> onStart = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span></span><br><span class="line">    countRef.current = totalSecond</span><br><span class="line">    setLoading(<span class="literal">true</span>)</span><br><span class="line">    setTime()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeRef.current)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button disabled=&#123;loading&#125; onClick=&#123;onStart&#125;&gt;</span><br><span class="line">      &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">LoadingButtonHooks.defaultProps = &#123;</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">  btnText: <span class="string">&#x27;获取验证码&#x27;</span>,</span><br><span class="line">  totalSecond: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;LoadingButtonHooks</span><br><span class="line">      loading=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      btnText=&#123;<span class="string">&#x27;获取验证码hooks1&#x27;</span>&#125;</span><br><span class="line">      totalSecond=&#123;<span class="number">10</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;LoadingButtonHooks</span><br><span class="line">      loading=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      btnText=&#123;<span class="string">&#x27;获取验证码hooks2&#x27;</span>&#125;</span><br><span class="line">      totalSecond=&#123;<span class="number">11</span>&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们使用 hooks 重写了整个程序， 它让我们把ui和状态更明确的区分开，也去解决了一些 renderProps 在多层嵌套时的jsx 嵌套地狱问题， 当然个人感觉在这个例子上好像 Hooks 与 renderProps 版本是差别不大的。</p><h3 id="方案八-uesHooks"><a href="#方案八-uesHooks" class="headerlink" title="方案八 uesHooks"></a>方案八 uesHooks</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useLoadingTimer</span>(<span class="params">initState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timeRef = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(initState.loading)</span><br><span class="line">  <span class="keyword">const</span> [btnText, setBtnText] = useState(initState.btnText)</span><br><span class="line">  <span class="keyword">const</span> [totalSecond, setTotalSecond] = useState(initState.totalSecond)</span><br><span class="line">  <span class="keyword">const</span> countRef = useRef(totalSecond)</span><br><span class="line">  <span class="keyword">const</span> clear = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeRef.current)</span><br><span class="line">    setLoading(<span class="literal">false</span>)</span><br><span class="line">    setTotalSecond(initState.totalSecond)</span><br><span class="line">    countRef.current = initState.totalSecond</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> setTime = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (countRef.current &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      clear()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    countRef.current = countRef.current - <span class="number">1</span></span><br><span class="line">    setTotalSecond(countRef.current)</span><br><span class="line"></span><br><span class="line">    timeRef.current = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setTime()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> onStart = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span></span><br><span class="line">    countRef.current = totalSecond</span><br><span class="line">    setLoading(<span class="literal">true</span>)</span><br><span class="line">    setTime()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeRef.current)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onStart,</span><br><span class="line">    loading,</span><br><span class="line">    totalSecond,</span><br><span class="line">    btnText</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> LoadingButtonHooks1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; onStart, loading, totalSecond, btnText &#125; = useLoadingTimer(&#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    btnText: <span class="string">&#x27;获取验证码UseHooks1&#x27;</span>,</span><br><span class="line">    totalSecond: <span class="number">10</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button disabled=&#123;loading&#125; onClick=&#123;onStart&#125;&gt;</span><br><span class="line">      &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> LoadingButtonHooks2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; onStart, loading, totalSecond, btnText &#125; = useLoadingTimer(&#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    btnText: <span class="string">&#x27;获取验证码UseHooks2&#x27;</span>,</span><br><span class="line">    totalSecond: <span class="number">10</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button disabled=&#123;loading&#125; onClick=&#123;onStart&#125;&gt;</span><br><span class="line">      &#123;!loading ? btnText : <span class="string">`请等待<span class="subst">$&#123;totalSecond&#125;</span>秒..`</span>&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;LoadingButtonHooks1 /&gt;</span><br><span class="line">    &lt;LoadingButtonHooks2 /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，更解耦的做法是，把 hooks 完全独立的提取出来成 useHooks ，最后我们再编写组件去组合 uesHooks。</p><p>在上述的例子中我们在 react 中用了 8 种 不同的方案，去描述了同一个功能的编写过程。有一点 “回” 字的多种写法的意味。不过他也代表着 react 社区在选择实现上的思想的变化过程，我觉得谈不上某一个方案，一定就完全比另外一个好。社区也有比如 HOC vs renderProps 的很多讨论。</p><p>仅以此希望大家能够辩证的去看这个过程，也希望能够在大家编写 React 组件时带来更多的新思路。</p><p>参考链接：</p><ul><li><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">React 中文官网 Hook 简介</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;需求：我们现在有一个获取验证码的按钮，需要在点击后禁用，并且在按钮上显示倒计时60秒才可以进行第二次点击。&lt;br&gt;本篇文章通过对这个需求的八种实现方式来讨论在 react 中的逻辑复用的进化过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g72uk6zdtqj30k00fxwfe.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码例子放在了 &lt;a href=&quot;https://codesandbox.io/s/kind-herschel-l4f9h?fontsize=14&quot;&gt;codesandbox&lt;/a&gt; 上。&lt;/p&gt;</summary>
    
    
    
    <category term="react" scheme="http://guowenfh.github.io/categories/react/"/>
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/react/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react" scheme="http://guowenfh.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>在 vue 中使用 jsx 与 class component 的各种姿势</title>
    <link href="http://guowenfh.github.io/2019/09/17/2019/vue-jsx-class-component/"/>
    <id>http://guowenfh.github.io/2019/09/17/2019/vue-jsx-class-component/</id>
    <published>2019-09-17T13:00:00.000Z</published>
    <updated>2020-03-12T04:04:13.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前我们分享过一次 <a href="https://blog.guowenfh.com/2019/04/28/2019/react-development-description-vue/">一个使用 react 的思想去使用 vue 的方式</a>。<br>随着组内很多时候为了让 view 层更加清晰，和一些复杂的逻辑处理，导致现在 vue 代码中 jsx 的代码越来越多，这里进行一个整理说明</p></blockquote> <span id="more"></span><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>先参看腾讯 alloyTeam 这篇文章：</p><ul><li><a href="http://www.alloyteam.com/2017/07/12918/">用 jsx 写 vue 组件</a></li></ul><p>里面有提到使用 <code>babel-plugin-transform-vue-jsx</code> babel 6 插件来处理 jsx 的编译。</p><p>当然可能是官方也知道在一定的场景下 jsx 相对模板是有优势的，于是单独有了这个仓库 对于上面的插件进行了增强。<a href="https://github.com/vuejs/jsx">https://github.com/vuejs/jsx</a> 在 babel 7+ 情况下可以参考使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props</span><br><span class="line">&lt;!--.babelrc--&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@vue/babel-preset-jsx&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在 jsx 中使用 v-model 进行双向绑定了！当然这只是一个语法糖。你也可以使用 babel 实现 v-for 。</p><p>对于一些简单的情况我们直接使用 jsx 替换 template 都不会有什么问题，但是当我们深入下去，比如要看一些 react 的 特殊模式 比如：<code>render props</code> 在 vue 中的使用。那么我们就要对 vue 实例的属性差异进行深入的对比和理解了。（render props 在vue中对应的就是 slotProps.default ）</p><ul><li><a href="https://cn.vuejs.org/v2/guide/render-function.html">https://cn.vuejs.org/v2/guide/render-function.html</a></li><li><a href="https://www.yuque.com/zeka/vue/vu60wg">https://www.yuque.com/zeka/vue/vu60wg</a></li></ul><h2 id="与组件库结合的问题"><a href="#与组件库结合的问题" class="headerlink" title="与组件库结合的问题"></a>与组件库结合的问题</h2><p>对于 antd-vue 来说，由于 实现的api基本和 react 版本一致，所以调用方式基本和react版本的文档也一致。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Input&#125; form <span class="string">&#x27;ant-design-vue&#x27;</span></span><br><span class="line">&lt;Input value=&#123;xx&#125; onChange=&#123;<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;&#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HelloWorld = <span class="function">(<span class="params">&#123; props &#125;</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello &#123;props.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是也有一些没有那么友好的组件库， 比如 iview ，由于 内部大部分api都使用了 <code>this.$emit(&#39;on-xxEvent&#39;)</code> 的形式，在 template 语法下 <code>@on-xxEvent=&quot;xx&quot;</code>觉得还好，但是在 jsx 语法下就显得很奇怪了。如下： </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Input value=&#123;xx&#125; on-on-Change=&#123;<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;&#125;&#125;&gt;</span><br></pre></td></tr></table></figure><p>在上面我们处理完了直接使用 jsx 的问题。那么我们能不能更像 react 一点呢？</p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>这个时候我们可能写的一个 vue 单文件组件是这样的：</p><p>VueForm.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;VueForm&#39;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style &gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>如何直接使用 .js 或者 jsx 文件？</p><p>VueForm.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueForm = &#123;</span><br><span class="line">  name: <span class="string">&#x27;VueForm&#x27;</span>,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">VueForm.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(VueForm.name, VueForm);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueForm;</span><br></pre></td></tr></table></figure><p>还是好麻烦啊，每一个组件都的去定义 install 方法，也得去写 methods 啥的，那么如何 再像一些呢？或者说更简单一些呢？</p><h2 id="class-component"><a href="#class-component" class="headerlink" title="class component"></a>class component</h2><p>vue 官方提供了 <a href="https://github.com/vuejs/vue-class-component">vue-class-component</a> 模块 结合我们上面聊的，我们可以写出来这样的代码。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">&#x27;vue-class-component&#x27;</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    propMessage: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="comment">// initial data</span></span><br><span class="line">  msg = <span class="number">123</span></span><br><span class="line">  <span class="comment">// use prop values for initial data</span></span><br><span class="line">  helloMsg = <span class="string">&#x27;Hello, &#x27;</span> + <span class="built_in">this</span>.propMessage</span><br><span class="line">  <span class="comment">// lifecycle hook</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">this</span>.greet()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// computed</span></span><br><span class="line">  get computedMsg () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;computed &#x27;</span> + <span class="built_in">this</span>.msg</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// method</span></span><br><span class="line">  greet () &#123;</span><br><span class="line">    alert(<span class="string">&#x27;greeting: &#x27;</span> + <span class="built_in">this</span>.msg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;input vModel=&#123;<span class="built_in">this</span>.msg&#125;&gt;</span><br><span class="line">        &lt;p&gt;prop: &#123;<span class="built_in">this</span>.propMessage&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;msg: &#123;<span class="built_in">this</span>.msg&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;helloMsg: &#123;<span class="built_in">this</span>.helloMsg&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;computed msg: &#123;<span class="built_in">this</span>.computedMsg&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.greet&#125;&gt;Greet&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然仅仅是这样可能还是不够的 。你需要再来一个模块 <a href="https://github.com/kaorun343/vue-property-decorator">vue-property-decorator</a> 甚至是 <a href="https://github.com/ktsn/vuex-class/">vuex-class</a></p><p>哈？ 这不是 React + Mobx ？</p><p>我们可以看到 vue 的可扩展性是非常强的。恭喜你已经成功进入邪教。23333</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前我们分享过一次 &lt;a href=&quot;https://blog.guowenfh.com/2019/04/28/2019/react-development-description-vue/&quot;&gt;一个使用 react 的思想去使用 vue 的方式&lt;/a&gt;。&lt;br&gt;随着组内很多时候为了让 view 层更加清晰，和一些复杂的逻辑处理，导致现在 vue 代码中 jsx 的代码越来越多，这里进行一个整理说明&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="react" scheme="http://guowenfh.github.io/categories/react/"/>
    
    <category term="vue" scheme="http://guowenfh.github.io/categories/react/vue/"/>
    
    
    <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
    <category term="react" scheme="http://guowenfh.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用 generic-pool 优化 puppeteer 并发问题</title>
    <link href="http://guowenfh.github.io/2019/06/16/2019/puppeteer-pool/"/>
    <id>http://guowenfh.github.io/2019/06/16/2019/puppeteer-pool/</id>
    <published>2019-06-16T14:44:19.000Z</published>
    <updated>2020-03-12T04:04:13.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个篇文章产生时间应该是在一年前的。。由于最近组里进了很多新小伙伴，写下这篇文章算是补一个介绍吧。</p><p>在17年的 D2 百度的小姐姐分享的话题 《打造前端复杂应用》时有提到利用服务端产生图片来导出 脑图和 h5 图片的问题，正好那段时间也正在做这个方向的探索 于是有 《<a href="https://blog.guowenfh.com/2018/03/05/2018/canvas-text-to-image-clarity/">一次canvas中文字转化成图片后清晰度丢失的探索</a> 》这篇文章的产生。里面提到了 在之前 我使用了 phantomjs 来解决服务端页面渲染的问题。当然后面我们改成了 puppeteer。由于其实都是虚拟浏览器，两者都遇到了浏览器复用的问题。</p></blockquote><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先 对于 puppeteer 到底是一个什么样的工具在这里我不过过多的赘述。你就把他当成一个可以在服务端无界面情况下运行的一个完整 chrome 就行了。我们可以利用他模拟用户在浏览器上的几乎所有操作。当然也包括网页渲染 和截图。<br />比如我之前写的  <a href="https://github.com/guowenfh/geek-time-topdf">geek-time-topdf</a>  之前基于 puppeteer 实现的一个 node.js cli 工具，可以将你购买的极客时间课程打印成 PDF （由于极客时间网页版现在已经挺好用 ，并且改版，现已经没维护了。不过还是可以参考，这里只是说一下可以这么用）</p><p>我们现在其实就是利用 puppeteer + node.js 构建了一个 http 服务。那么必然我们不可能每一次请求都去产生一个 puppeteer 实例。（来一个请求就打开一个chrome。这本身就是一个非常消耗性能的行为。（ps：想象一下你在电脑上点开的每一个链接都会打开一个新的浏览器。用完然后你又把它关掉。如此往复）)。当然你本身也做不到。因为当你 启动了一定数量的 puppeteer 实例之后 ，自己就报 EventEmitter 达到上限的错了。<br />当然你可能还是无法避免的想要启动更多实例怎么办呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; EventEmitter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line">EventEmitter.defaultMaxListeners = <span class="number">30</span> <span class="comment">// 修改 EventEmitter 的上限</span></span><br></pre></td></tr></table></figure><h2 id="使用-链接池"><a href="#使用-链接池" class="headerlink" title="使用 链接池"></a>使用 链接池</h2><p>好了上面废话了那么多，进入正题。 既然我们说了那么多 不可能每一次都启动和关闭一个 puppeteer 实例。 那么今天我们的主角  <a href="https://github.com/coopernurse/node-pool">generic-pool</a>  就要出场了。</p><p>这是一个基于 Promise 的通用链接池库。有了他之后我们就可以 将 puppeteer 实例放在我们的链接池中，如果有请求进来，那么就去池子里面去取一个实例。我们可以设置实例的上限，和常驻池中的实例数量。（一个任务队列，超过上限时自动排队。）然后你拿到这个实例之后就可以去进行和普通创建实例一样的操作了。（性能对比图这里就不给出了，提升还是非常巨大的，可以自行尝试。）</p><p>具体的使用可以在 github 查看这里就不多聊了。我们直接基于我们目前的一个启动创建配置来进行一个讲解。（算了，讲解就直接写在代码注释里了。） -_-!</p><p>puppeteer-pool.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> genericPool = <span class="built_in">require</span>(<span class="string">&#x27;generic-pool&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化一个 Puppeteer 池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>[options=&#123;&#125;] 创建池的配置配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>[options.max=10] 最多产生多少个 puppeteer 实例 。如果你设置它，请确保 在引用关闭时调用清理池。 pool.drain().then(()=&gt;pool.clear())</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>[options.min=1] 保证池中最少有多少个实例存活</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>[options.maxUses=2048] 每一个 实例 最大可重用次数，超过后将重启实例。0表示不检验</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>[options.testOnBorrow=2048] 在将 实例 提供给用户之前，池应该验证这些实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>[options.autostart=false] 是不是需要在 池 初始化时 初始化 实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>[options.idleTimeoutMillis=3600000] 如果一个实例 60分钟 都没访问就关掉他</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>[options.evictionRunIntervalMillis=180000] 每 3分钟 检查一次 实例的访问状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>[options.puppeteerArgs=&#123;&#125;] puppeteer.launch 启动的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>[options.validator=(instance)=&gt;Promise.resolve(true))] 用户自定义校验 参数是 取到的一个实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>[options.otherConfig=&#123;&#125;] 剩余的其他参数 // For all opts, see opts at https://github.com/coopernurse/node-pool#createpool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span> <span class="variable">pool</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> initPuppeteerPool = <span class="function">(<span class="params">options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    max = <span class="number">10</span>,</span><br><span class="line">    min = <span class="number">2</span>,</span><br><span class="line">    maxUses = <span class="number">2048</span>,</span><br><span class="line">    testOnBorrow = <span class="literal">true</span>,</span><br><span class="line">    autostart = <span class="literal">false</span>,</span><br><span class="line">    idleTimeoutMillis = <span class="number">3600000</span>,</span><br><span class="line">    evictionRunIntervalMillis = <span class="number">180000</span>,</span><br><span class="line">    puppeteerArgs = &#123;&#125;,</span><br><span class="line">    validator = <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>),</span><br><span class="line">    ...otherConfig</span><br><span class="line">  &#125; = options</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> factory = &#123;</span><br><span class="line">    create: <span class="function">() =&gt;</span></span><br><span class="line">      puppeteer.launch(puppeteerArgs).then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 puppeteer 实例 ，并且初始化使用次数为 0</span></span><br><span class="line">        instance.useCount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">      &#125;),</span><br><span class="line">    destroy: <span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">      instance.close()</span><br><span class="line">    &#125;,</span><br><span class="line">    validate: <span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行一次自定义校验，并且校验校验 实例已使用次数。 当 返回 reject 时 表示实例不可用</span></span><br><span class="line">      <span class="keyword">return</span> validator(instance).then(<span class="function"><span class="params">valid</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(valid &amp;&amp; (maxUses &lt;= <span class="number">0</span> || instance.useCount &lt; maxUses)))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> config = &#123;</span><br><span class="line">    max,</span><br><span class="line">    min,</span><br><span class="line">    testOnBorrow,</span><br><span class="line">    autostart,</span><br><span class="line">    idleTimeoutMillis,</span><br><span class="line">    evictionRunIntervalMillis,</span><br><span class="line">    ...otherConfig</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> pool = genericPool.createPool(factory, config)</span><br><span class="line">  <span class="keyword">const</span> genericAcquire = pool.acquire.bind(pool)</span><br><span class="line">  <span class="comment">// 重写了原有池的消费实例的方法。添加一个实例使用次数的增加</span></span><br><span class="line">  pool.acquire = <span class="function">() =&gt;</span></span><br><span class="line">    genericAcquire().then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</span><br><span class="line">      instance.useCount += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> instance</span><br><span class="line">    &#125;)</span><br><span class="line">  pool.use = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resource</span><br><span class="line">    <span class="keyword">return</span> pool</span><br><span class="line">      .acquire()</span><br><span class="line">      .then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">        resource = r</span><br><span class="line">        <span class="keyword">return</span> resource</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(fn)</span><br><span class="line">      .then(</span><br><span class="line">        result =&gt; &#123;</span><br><span class="line">          <span class="comment">// 不管业务方使用实例成功与后都表示一下实例消费完成</span></span><br><span class="line">          pool.release(resource)</span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">        &#125;,</span><br><span class="line">        err =&gt; &#123;</span><br><span class="line">          pool.release(resource)</span><br><span class="line">          <span class="keyword">throw</span> err</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pool = initPuppeteerPool(&#123; <span class="comment">// 全局只应该被初始化一次</span></span><br><span class="line">    puppeteerArgs: &#123;</span><br><span class="line">      ignoreHTTPSErrors: <span class="literal">true</span>,</span><br><span class="line">      headless: <span class="literal">false</span>, <span class="comment">// 是否启用无头模式页面</span></span><br><span class="line">      timeout: <span class="number">0</span>,</span><br><span class="line">      pipe: <span class="literal">true</span>, <span class="comment">// 不使用 websocket </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在业务中取出实例使用</span></span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> pool.use(<span class="function"><span class="params">instance</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> instance.newPage()</span><br><span class="line"><span class="keyword">await</span> page.goto(<span class="string">&#x27;http://xxx.xxx&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">120000</span> &#125;)</span><br><span class="line"><span class="comment">// do XXX ...</span></span><br><span class="line">    <span class="keyword">return</span> page</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// do XXX ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应该在服务重启或者关闭时执行</span></span><br><span class="line"><span class="comment">//pool.drain().then(() =&gt; pool.clear())</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到我们在 基于<a href="https://github.com/coopernurse/node-pool">generic-pool</a> 的情况下构建了一个 Puppeteer 的池。每一次请求进来之后 我们调用 <code>pool.use</code> 去取得一个实例。然后去进行我们后续的操作就可以了。</p><p>整体流程如下：在服务启动时启动池。<br>请求到达-&gt;从池中取得一个 Puppeteer 实例-&gt;打开tab页-&gt;运行代码-&gt;关闭tab页-&gt;返回数据（其他的管理都交给池了）</p><p>比如简述一下我们目前运行代码的业务流程：</p><ol><li>拿到 json 数据把 canvas 页面渲染出来 （前端页面渲染流程，配置与渲染分离，只有在渲染的一刻才知道最终产生的数据是什么。</li><li>渲染页面与 Puppeteer 交互。拿到处理后的 json </li><li>拿到截图的配置参数</li><li>使用 Puppeteer Page api 截图。</li><li>对产生的 图片 buffer 做格式转化（调用 imagemagick（一个跨平台图像处理库） 等处理图片）</li><li>数据上传 阿里 oss</li><li>异步通知其他端处理已经结束。</li></ol><p>然后我们再仔细看配置中的 <code>maxUses</code> 可以看到我们自定义扩展了每一个 Puppeteer  最多可以被使用的次数（防止实例变卡什么的）来防止一些意外情况出现。</p><p>其实我们之所以需要一个池其中一个问题主要就是处理性能问题。。这一部分其实在在业务代码中也需要处理。下面简单说几个点。</p><ol><li>Puppeteer 什么样的启动参数对服务性能有提升？</li><li>在截图时选什么样的参数能在达到业务要求的情况下尽可能的提升性能？</li><li>是产生图片在本地？还是直接拿到 图片 buffer 去和第三方服务对接？</li><li>有没有可能把业务处理流程进行步骤拆分？让 Puppeteer 承担的工作少一些？</li></ol><p>那我们有了一个 Puppeteer 的池，实现复用 Puppeteer 实例。那么如何更好的去实现一个 http 服务呢？</p><h2 id="结合-egg-js"><a href="#结合-egg-js" class="headerlink" title="结合 egg.js"></a>结合 egg.js</h2><p>egg.js 是蚂蚁金服出品的一个企业级 node.js 框架。可以高效的搭建一个可用的 http 服务，其他介绍自行官网查看。具体我这里就不多介绍了。</p><p>这里简单说一下怎么结合 puppeteer-pool 在一起使用 核心其实就是 创建 <code>app.js</code>  做初始化处理。</p><p><strong>需要注意 结合 <code>egg.js</code> 使用时，需要手动指定 <code>workers</code> 数量为 1: <code>egg-scripts start --daemon --workers=1</code> 不然会启动 <code>pool.max * workers</code> 数量的 <code>Puppeteer</code> 实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initPuppeteerPool = <span class="built_in">require</span>(<span class="string">&#x27;./util/puppeteer-pool&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; EventEmitter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line">EventEmitter.defaultMaxListeners = <span class="number">30</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBootHook</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">app</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.app = app</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">didLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 所有的配置已经加载完毕</span></span><br><span class="line">    <span class="comment">// 可以用来加载应用自定义的文件，启动自定义的服务</span></span><br><span class="line">    <span class="built_in">this</span>.app.pool = initPuppeteerPool()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">beforeClose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.app.pool.drain) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">this</span>.app.pool.drain().then(<span class="function">() =&gt;</span> <span class="built_in">this</span>.app.pool.clear())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = AppBootHook</span><br></pre></td></tr></table></figure><p>server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).Service</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenshotService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">renderPage</span>(<span class="params">url</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; app, config &#125; = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">const</span> imageBuffer = <span class="keyword">await</span> app.pool.use(<span class="keyword">async</span> instance =&gt; &#123;</span><br><span class="line">            <span class="comment">// 1. 创建一个新窗口</span></span><br><span class="line">            <span class="keyword">const</span> page = <span class="keyword">await</span> instance.newPage()</span><br><span class="line">            <span class="keyword">await</span> page.goto(url, &#123; <span class="attr">timeout</span>: <span class="number">120000</span> &#125;)</span><br><span class="line">            <span class="comment">// 2. 截图参数，截图</span></span><br><span class="line">            <span class="keyword">const</span> buf = <span class="keyword">await</span> page.screenshot(&#123; ...imgOutOption, <span class="attr">clip</span>: opt &#125;)</span><br><span class="line">            <span class="keyword">return</span> buf</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> imageBuffer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说一下-Puppeteer-使用到的坑"><a href="#说一下-Puppeteer-使用到的坑" class="headerlink" title="说一下 Puppeteer 使用到的坑"></a>说一下 Puppeteer 使用到的坑</h2><p>这里说三个 Puppeteer 使用上的坑吧：</p><ol><li>可以看到第 5 点：由于我们的场景对于图片清晰度要求很高，所以发现了这个问题。（Puppeteer 导出 png 再调用 imagemagick 转成jpg ,也比直接使用 Puppeteer 导出 jpg 清晰度高（即便清晰度设置成了100 -_- !））</li><li>Puppeteer 无法截图产生超过 65535 的图。（当然 imagemagick，sharp 也无法处理超过这个的图。（这个是一个挺有意思的事情。有兴趣的可以去搜索这个数看看</li><li><a href="mailto:&#80;&#x75;&#x70;&#112;&#x65;&#116;&#x65;&#x65;&#114;&#64;&#x31;&#46;&#49;&#x32;&#x2e;&#x32;">&#80;&#x75;&#x70;&#112;&#x65;&#116;&#x65;&#x65;&#114;&#64;&#x31;&#46;&#49;&#x32;&#x2e;&#x32;</a> 之后的版本 单张截图超过 8000（4096 * 2）（不确定值，但是确实会出问题，因为出现问题就没升级了）有一定概率导致 图片部分区域为空白。</li></ol><h2 id="后续-扩展"><a href="#后续-扩展" class="headerlink" title="后续/扩展"></a>后续/扩展</h2><blockquote><p>这是目前未处理的部分。</p></blockquote><p>其实可以看到我们在上面的处理实现了多个 Puppeteer 实例的复用，但是其中也有一个问题，那就是其实我们在这样的情况下使用每一次请求过来只会利用一个 浏览器 窗口，那么我们的 QPS 直接与我们新建的 Puppeteer 实例上限挂钩（配置中的 max 属性），当然还有单个任务的处理时间。（当然在我们内部的业务场景没啥问题（长度过长，图片太多。然后还要处理图片。cpu早100%了）</p><p>能不能在实例池的基础上，再创建一个单实例的窗口池呢？ （因为实际上我们真正操作的内容 其实都是 Puppeteer 的 Page ）这部分是还没做的，就交给你们去实现了</p><p>参考链接：</p><ul><li><a href="https://blog.it2048.cn/article-puppeteer-speed-up/">Puppeteer 性能优化与执行速度提升</a></li><li><a href="https://github.com/binded/phantom-pool">phantomJs 池</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这个篇文章产生时间应该是在一年前的。。由于最近组里进了很多新小伙伴，写下这篇文章算是补一个介绍吧。&lt;/p&gt;
&lt;p&gt;在17年的 D2 百度的小姐姐分享的话题 《打造前端复杂应用》时有提到利用服务端产生图片来导出 脑图和 h5 图片的问题，正好那段时间也正在做这个方向的探索 于是有 《&lt;a href=&quot;https://blog.guowenfh.com/2018/03/05/2018/canvas-text-to-image-clarity/&quot;&gt;一次canvas中文字转化成图片后清晰度丢失的探索&lt;/a&gt; 》这篇文章的产生。里面提到了 在之前 我使用了 phantomjs 来解决服务端页面渲染的问题。当然后面我们改成了 puppeteer。由于其实都是虚拟浏览器，两者都遇到了浏览器复用的问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="node" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node/"/>
    
    <category term="nodejs" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node/nodejs/"/>
    
    <category term="puppeteer" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node/nodejs/puppeteer/"/>
    
    
    <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
    <category term="nodejs" scheme="http://guowenfh.github.io/tags/nodejs/"/>
    
    <category term="字体" scheme="http://guowenfh.github.io/tags/%E5%AD%97%E4%BD%93/"/>
    
    <category term="node" scheme="http://guowenfh.github.io/tags/node/"/>
    
    <category term="puppeteer" scheme="http://guowenfh.github.io/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>再谈中文字体的子集化与动态创建字体</title>
    <link href="http://guowenfh.github.io/2019/06/04/2019/font-carrier2/"/>
    <id>http://guowenfh.github.io/2019/06/04/2019/font-carrier2/</id>
    <published>2019-06-04T11:31:00.000Z</published>
    <updated>2020-03-12T04:04:13.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实在项目中用中文字体子集化已经很久了，在刚接受到项目时真的让用户去下载全量字体的方式也早已被废除。如今终于有时间将它整理成文。算是对这件事情的一个基本了结吧。</p></blockquote><h2 id="为什么要截取字体？"><a href="#为什么要截取字体？" class="headerlink" title="为什么要截取字体？"></a>为什么要截取字体？</h2><p>众所周知，相对于英文字体，中文字体就是一个“庞然大物”。英文字体 <code>200～300KB</code> 已经很大了，而中文字体 动戈 <code>10~30MB</code>。<br>这主要是两个方面的原因：</p><ol><li>中文字体包含的字形数量极多 英文字体则只需包含几十个基本字符和符号。有些中文字体还要包括韩语和日语的字形。</li><li>中文字形的曲折变化复杂度高，用于控制中文字形曲线的控制点普遍比英文更多，由于数据量不一样，字体大小也自然就有这样的膨胀了</li></ol><span id="more"></span><p>但是需求总是有的，在一些特殊的视觉效果，或者是在一些富文本（如海报设计类）的编辑场景下，特殊字体的支持更是必不可少的。 但是一个中文字体 <code>10～20Mb</code> 我网站可能支持100种字体，你让用户都全量下载显然是不可能的！并且也不是每个页面都会用到一个字体文件中的所有字符，全量加载本身也极其浪费。</p><p>在《通用汉字表》中一级表确定 3500 常用中文汉字（中国义务教育9年级需要掌握的汉字数量）即可覆盖日常使用汉字的99.8%</p><h2 id="如何使用自定义字体。"><a href="#如何使用自定义字体。" class="headerlink" title="如何使用自定义字体。"></a>如何使用自定义字体。</h2><p>在真正开始之前，我们先来回顾一下，如何去让一个文本使用自定义字体。这里我们会聊到 <code>@font-face</code>，这就是我们目前前端最常用的Web自定义字体技术。</p><p><a href="https://css-tricks.com/snippets/css/using-font-face/">示例代码：https://css-tricks.com/snippets/css/using-font-face/</a><br>这里取了其中一个最全的方案，基本上能够兼容到所有的浏览器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;MyWebFont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;webfont.eot&#x27;</span>); <span class="comment">/* 兼容IE9 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;webfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), /* IE6-IE8 */</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">&#x27;webfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>), /* 最新浏览器 */</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">&#x27;webfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>), /* 较新浏览器 */</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">&#x27;webfont.ttf&#x27;</span>)  <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), /* Safari、Android、iOS */</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">&#x27;webfont.svg#svgFontName&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>); <span class="comment">/* 早期iOS */</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;!--使用--&gt;</span><br><span class="line"><span class="selector-class">.newfont</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;MyWebFont&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然除了直接使用 <code>@font-face</code> ，还可以使用 <code>@import</code> 规则或 <code>link</code> 元素导入或加载包含 <code>@font-face</code> 声明的外部文件：</p><p>使用 google open font （<a href="https://cdn.baomitu.com/index/fonts">360 奇舞 cdn 的 google font 镜像</a>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 导入</span><br><span class="line">@import url(//fonts.googleapis.com/css?family=Open+Sans);</span><br><span class="line">// 或者引用</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&#x27;//fonts.googleapis.com/css?family=Open+Sans&#x27;</span> <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/css&#x27;</span>&gt;</span></span><br><span class="line">// 实际使用</span><br><span class="line">body &#123;</span><br><span class="line">  font-family: &#x27;Open Sans&#x27;, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于字体如何使用就简单介绍到这，网上也已经有很多各种各样的教程。不再过多赘述。 其实目前 iconfont.cn 这类字体图标的网站就是这样的技术。</p><h2 id="字体如何截取？"><a href="#字体如何截取？" class="headerlink" title="字体如何截取？"></a>字体如何截取？</h2><h3 id="1-unicode-range"><a href="#1-unicode-range" class="headerlink" title="1. unicode-range"></a>1. unicode-range</h3><p><code>unicode-range</code> 是一个 CSS 属性，一般和 <code>@font-face</code> 规则一起使用。它只是在本地既有字体或者浏览器已经下载的字体基础上做一个指向子集的“软链接”，并不能真正减小浏览器下载文件的大小。</p><p>对于这种技术由于并不能真正的减少字体大小，所以也不在这我篇文章的范围内。给两个参考链接给大家观看了解。</p><ul><li><a href="https://github.com/75team/w3c/blob/master/articles/20181024_%E5%89%8D%E7%AB%AF%E5%AD%97%E4%BD%93%E6%88%AA%E5%8F%96%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87.md">前端字体截取：实战篇</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2016/11/css-unicode-range-character-font-face/">张鑫旭 - CSS unicode-range特定字符使用font-face自定义字体</a></li></ul><h3 id="2-全量字体精简"><a href="#2-全量字体精简" class="headerlink" title="2. 全量字体精简"></a>2. 全量字体精简</h3><blockquote><p>即在服务端从“全量”字体中分离出一个体积相对极小的字体子集，做成 webfont 通过 Web 服务器或 CDN 下发给浏览器。</p></blockquote><p>这里需要介绍笔者 fork 之后修改的一个库: <a href="https://github.com/guowenfh/font-carrier2">font-carrier2</a><br>项目 fork 自 font-carrier。 由于 font-carrier 有很长时间无人维护，但是我又有需求。然后就特此开一个新分支。做一些特性的更新与 bug 的修复。</p><p>下面给出一种精简中文字体的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fontCarrier2 = <span class="built_in">require</span>(<span class="string">&#x27;font-carrier2&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> transFont = fontCarrier2.transfer(<span class="string">&#x27;./test/test.ttf&#x27;</span>)</span><br><span class="line"><span class="comment">// 会自动根据当前的输入的文字过滤精简字体</span></span><br><span class="line">transFont.min(<span class="string">&#x27;我是精简后的字体，我可以重复&#x27;</span>)</span><br><span class="line"><span class="comment">// 产生一个新字体</span></span><br><span class="line">transFont.output(&#123;</span><br><span class="line">  path: <span class="string">&#x27;./test/minFont&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用新字体：（这样这个新字体中只有<code>《我是精简后的字体，我可以重复》</code>这几个字）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;minFont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;./test/minFont.eot&#x27;</span>); <span class="comment">/* IE9 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./test/minFont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>), /* IE6-IE8 */</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;./test/minFont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;./test/minFont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;./test/minFont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>), /* chrome、firefox、opera、Safari, Android, iOS <span class="number">4.2</span>+*/</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;./test/minFont.svg#iconfont&#x27;</span>); <span class="comment">/* iOS 4.1- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们这里很简单的就将一个中文字体给子集化了，那么关于 <code>font-carrier2</code> 如何去子集化一个字体我们也简单介绍到这。下面我们来进入重头戏：<strong>到底是如何做到精简的</strong>。</p><h2 id="字体解析。-font-carrier2-基本思路剖析"><a href="#字体解析。-font-carrier2-基本思路剖析" class="headerlink" title="字体解析。(font-carrier2 基本思路剖析)"></a>字体解析。(font-carrier2 基本思路剖析)</h2><p>关于如何解析一个字体的话，其实都是有对应规范的：这个是其中一个规范的描述。<a href="https://docs.microsoft.com/en-us/typography/opentype/spec/otff">microsoft-The OpenType Font File</a><br>其实也就是我们如何从一个二进制的流（当然会转化成 buffer ）中，转化成一个人类可读的对象。(psd.js（一个解析psd为json的库，其实也是在做一个类似的事情。）)<br>这一步 <a href="https://opentype.js.org/">opentype.js</a> 已经帮我们做得很好了。 他能够解析 <code>ttf otf woff</code> 三种文件格式解析为一个 font 类。那么我们拿到这个 font 类 之后就可以去做我们任何想做的事情了。<strong>那么对于一个 <code>webfont</code> 来说有哪些是最关键的呢？</strong></p><p>1.解读字体内容 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实我们就用这些东西足够去创建一个字体了</span></span><br><span class="line"><span class="comment">// 首先我们使用 opentype 解析一个字体文件读取之后的 buffer 。</span></span><br><span class="line"><span class="keyword">var</span> font = opentype.parse(toArrayBuffer(fs.readFileSync(<span class="string">&#x27;font.tff&#x27;</span>))) </span><br><span class="line"><span class="comment">// 这些内容可以在 opentype.js 官网中看到详细信息</span></span><br><span class="line"><span class="keyword">var</span> hhea = font.tables.hhea <span class="comment">// Horizontal Header table</span></span><br><span class="line"><span class="keyword">var</span> head = font.tables.head <span class="comment">// Font Header table</span></span><br><span class="line"><span class="keyword">var</span> name = font.tables.name  <span class="comment">// 存储了原字体 名称相关信息。处理 fontFamily </span></span><br><span class="line"><span class="keyword">var</span> glyphs = font.glyphs.glyphs <span class="comment">// 重点（存储了所有的 字形的列表。</span></span><br></pre></td></tr></table></figure><p>2.生成一个简单的 <code>fontObjs</code> 数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fontObjs = &#123;</span><br><span class="line">     options: &#123;</span><br><span class="line">       id: name.postScriptName.en || <span class="string">&#x27;iconfont&#x27;</span>,</span><br><span class="line">       horizAdvX: hhea.advanceWidthMax || <span class="number">1024</span>,</span><br><span class="line">       vertAdvY: head.unitsPerEm || <span class="number">1024</span></span><br><span class="line">     &#125;,</span><br><span class="line">     fontface: &#123;</span><br><span class="line">       fontFamily: name.fontFamily.en || <span class="string">&#x27;iconfont&#x27;</span>,</span><br><span class="line">       ascent: hhea.ascender,</span><br><span class="line">       descent: hhea.descender,</span><br><span class="line">       unitsPerEm: head.unitsPerEm</span><br><span class="line">     &#125;,</span><br><span class="line">     glyphs: &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> path, unicode</span><br><span class="line">   _.each(font.glyphs.glyphs, <span class="function"><span class="keyword">function</span>(<span class="params">g</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       path = g.path.toPathData()</span><br><span class="line">       <span class="keyword">if</span> (_.isArray(g.unicodes)) &#123;</span><br><span class="line">         _.each(g.unicodes,<span class="function"><span class="keyword">function</span>(<span class="params">_unicode</span>)</span>&#123;</span><br><span class="line">           unicode = <span class="string">&#x27;&amp;#x&#x27;</span> + (_unicode).toString(<span class="number">16</span>) + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">           <span class="keyword">if</span>(unicode === <span class="string">&#x27;&amp;#x20;&#x27;</span> || unicode === <span class="string">&#x27;&amp;#x2005;&#x27;</span> || path)&#123;</span><br><span class="line">               fontObjs.glyphs[unicode] = &#123;</span><br><span class="line">                   d: path,</span><br><span class="line">                   unicode: unicode,</span><br><span class="line">                   name: g.name || <span class="string">&#x27;uni&#x27;</span> + _unicode,</span><br><span class="line">                   horizAdvX: g.advanceWidth,</span><br><span class="line">                   vertAdvY: fontObjs.options.vertAdvY</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>3.<code>glyphs</code> 精简。 glyphs 这个时候已经是一个对象了。 <code>key</code> 为 文字对应的 <code>unicode</code>， <code>value</code> 实际上是一个 <code>svg</code> 字体中对应 <code>glyphs</code> 的信息。具体可以查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/SVG_fonts">MDN - SVG 字体</a> 里面 <code>glyphs</code> 对应的部分。如果需要精简的话 那么我们其实只要从这个 <code>glyphs</code> 对象里面 提取所需要文字对应的 <code>unicode</code> 就行了。<br>4.转化成 <code>svg</code> 字体。这个其实就是将 上面 提到的 <code>fontObjs</code>，和需要提取的文字精简过后的 <code>glyphs</code> 转化成 <code>MDN - SVG 字体</code>。这个其实也是 <code>fontCarrier2</code> 中比较重要的部分。<br>5.生成各种字体。<code>fontCarrier2</code> 就是直接先生成一个 <code>svg</code> 的字符串，然后通过 <code>svg2ttf</code> 转化成 <code>ttf buffer</code> 。（本着不多次重复造轮子的原则。在网上可以找到各种字体转化的库 比如 <code>svg2ttf</code> <code>ttf2woff</code>.. 等。然后再通过 <code>ttf2woff</code>/<code>ttf2woff2</code> 等.. 转化成其他的字体文件。（这样当然性能不是最高的。不过实现会快很多。）<br>6.在前端使用 <code>font-face + font-family </code> 引用新的字体。</p><p>那么 <code>font-carrier2</code> 的基本思路剖析 我们就到这了。通过上面这些步骤我们就实现了一个中文字体的子集化。下面我们再聊聊动态创建字体思路。</p><h2 id="动态创建字体"><a href="#动态创建字体" class="headerlink" title="动态创建字体"></a>动态创建字体</h2><p>先来看一下 在 <code>font-carrier2</code> 中如何通过空白字体去创建文字。具体效果可以在库中 <code>test/index.html</code> 看到。</p><ul><li><a href="https://github.com/guowenfh/font-carrier2/blob/master/test/create_test.js">https://github.com/guowenfh/font-carrier2/blob/master/test/create_test.js</a><br><img src="//ww3.sinaimg.cn/large/006tNc79ly1g3p9k8zzptj30u01w0dq1.jpg"></li></ul><p>其实这个图看完。结合我们之前我们看的 <code>font-carrier2</code> 处理流程。 我们动态创建字体的思路就很明确了。</p><ol><li>解析字体 得到 <code>fontObjs</code> ，(<code>options</code> &amp; <code>fontface</code> &amp; <code>glyphs</code>)。</li><li>把 <code>fontObjs</code> 存下来（各种存储方式任选：内存/文件/redis/数据库…）</li><li>前端发送请求。（ <code>font-family</code>和对应的文字（<code>&quot;simplified&quot;:&quot;纯空白 迷你简硬笔楷书 字体测试1，2，3&quot;</code>）</li><li>服务端接受到请求。通过 将接受到的文字转化成 <code>unicode</code>, 然后再通过 <code>font-family</code>，取到 <code>options</code> &amp; <code>fontface</code> &amp; <code>glyphs</code> 对应的值。<strong>创建一个新字体</strong>。返回给前端。</li><li>前端接受到返回。创建 <code>font-face</code> 插入到 <code>style</code> 插入 html</li><li>你还能通过 <code>fontfaceobserver</code> 这个库来监听字体是否生效。（ canvas 的 fillText 不会在字体更新后自动刷新</li><li>然后就是正常使用了。</li></ol><p>在笔者目前的项目中使用的是上述的流程。</p><p>不过也非固定，第 4 步之后 是一个分支流程。<br>通过后端去创建字体可能对服务端造成较大压力。由于我们去创建一个字体的基本信息都存下来了。<br>那么其实也可以后端只做存储相关的工作。 通过在浏览器直接操作 <code>ArrayBuffer</code>和 <code>blob</code> （其实 <code>opentype.js</code>把这个也实现了）利用客户的浏览器去生成字体（目前市面上调研到几个做子集化公司付费解决方法。</p><p>文章到这就基本结束了。相信看下来应该对中文字体的子集化应该会有一个基本上的了解。<br><code>font-carrier2</code> 和 <code>opentype.js</code> 还有很多特点没介绍到。剩下的就交给各位自己去想象了。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;其实在项目中用中文字体子集化已经很久了，在刚接受到项目时真的让用户去下载全量字体的方式也早已被废除。如今终于有时间将它整理成文。算是对这件事情的一个基本了结吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么要截取字体？&quot;&gt;&lt;a href=&quot;#为什么要截取字体？&quot; class=&quot;headerlink&quot; title=&quot;为什么要截取字体？&quot;&gt;&lt;/a&gt;为什么要截取字体？&lt;/h2&gt;&lt;p&gt;众所周知，相对于英文字体，中文字体就是一个“庞然大物”。英文字体 &lt;code&gt;200～300KB&lt;/code&gt; 已经很大了，而中文字体 动戈 &lt;code&gt;10~30MB&lt;/code&gt;。&lt;br&gt;这主要是两个方面的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中文字体包含的字形数量极多 英文字体则只需包含几十个基本字符和符号。有些中文字体还要包括韩语和日语的字形。&lt;/li&gt;
&lt;li&gt;中文字形的曲折变化复杂度高，用于控制中文字形曲线的控制点普遍比英文更多，由于数据量不一样，字体大小也自然就有这样的膨胀了&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="node" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node/"/>
    
    <category term="webfont" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node/webfont/"/>
    
    
    <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
    <category term="字体" scheme="http://guowenfh.github.io/tags/%E5%AD%97%E4%BD%93/"/>
    
    <category term="node" scheme="http://guowenfh.github.io/tags/node/"/>
    
    <category term="webfont" scheme="http://guowenfh.github.io/tags/webfont/"/>
    
  </entry>
  
  <entry>
    <title>《张乌梅的日记》摘录</title>
    <link href="http://guowenfh.github.io/2019/05/28/2019/zhang-wu-mei-diary/"/>
    <id>http://guowenfh.github.io/2019/05/28/2019/zhang-wu-mei-diary/</id>
    <published>2019-05-28T14:44:19.000Z</published>
    <updated>2020-03-12T04:04:13.282Z</updated>
    
    <content type="html"><![CDATA[<p>08年2月3日阴<br>胡老师走了，我想世界上再没有这样的老师了。好人有好报吗？骗人的！</p><p>2月4日晴<br>村子来了个人，好像是胡老师的男朋友，不喜欢他，因为他一年里一次都没有来看过胡老师，胡老师明显是很想他的，胡老师，那是叫思念吗？</p><p>2月7日晴<br>胡老师的爸妈，还有那个人，都在村里过年了，听人说那个人昨天晚上喝了很多酒，在操场上吐，吐出血了，真的吗？他是在伤心吗？如果是的，我就不那么讨厌他了。</p><p>2月13日大雨<br>那个人又去山上了，这么大雨，他不怕吗？</p><span id="more"></span><p>2月21日雨转晴<br>元宵节了，他还是住在学校二楼，没有回城里。好像他要来做我们的新老师，他肯定不是一个好老师，更比不上胡老师。</p><p>2月23日阴雨<br>开学了，他果然来到教室，说他叫赵甲第，还在黑板上写下了这个名字，要给我们讲课，他说不一定比胡老师讲得更好，但他会跟胡老师一样用心，跟她一样希望将来某一天我们所有人都可以挺着胸膛走出村子。然后他就开始上课了，我什么东西都没有听进去，只是在想，他真的能一年都呆在村子里吗？能像胡老师那样对我们吗？嗯，他的粉笔字很好看。明天要好好学习了。胡老师在那里看着我们呢。</p><p>2月28日阳光<br>一个星期了，他不太爱笑，上课应该能算很认真，还是经常一个人去山顶，二娃偷偷说他看到赵老师坐在那里，还会拿树叶吹歌曲，就是《丁香花》。</p><p>3月14日晴<br>时间过得很快，大概就是书上说的光阴似箭吧，算一下，他来观音村有两个多月了，给我们上课也一个多月了，班上很多男生都开始喜欢他，我不理解。</p><p>4月4日清明节<br>今天胡老师父母来了，和他一起去了胡老师坟前，我们全村子都去了，他和胡老师爸爸，还有二叔，都给胡老师敬了酒，他闭着眼睛说了点什么，但我没有听到。问燕子她们，也都说没听清楚，可能只有胡老师能听到。后来我们走了，胡老师父母也走了，他还是不肯走。为什么呢，是他有很多话想让胡老师知道吗？</p><p>5月2日明媚<br>劳动节放假了，阳子二娃这些调皮蛋去隔壁村子里玩，结果被人欺负了，鼻青眼肿的，回来还不敢回家，然后那个村子就来了一帮大人，很凶，打了人不说，还要我们村里的人赔钱，我二叔躲起来了，然后他跟阳子二娃他们问清楚了事情经过，什么都没有说，就直接冲上去把那些人给打了一顿，真厉害呀，一个人就把那些不讲理的人全打跑了，好几个都躺在地上，流了很多血，很吓人，结果被打的人还都跟他道歉，奇怪。没想到他以前在课堂上看到阳子几个捣蛋鬼不专心听课，他都不会用教鞭打的，我还以为他脾气很好呢。他打完人，跟二娃几个说以后有人不讲理欺负到村子里，就打，打不过就用棍子砖头，出了事情，医药费他出。我妈回家后说赵老师了不得。</p><p>5月5日小雨<br>上学了，他从县里搬了很多书过来，跟胡老师的书放在一起，有几本新的《安徒生童话》，很好看。下课的时候，他竟然跟我们女孩子一起跳皮筋了，可他总是跳错，真笨，跟他一头的燕子都输啦，可为什么输的燕子很开心，赢了的我不那么开心呢？</p><p>5月10日晴<br>他用啤酒盖子上的橡皮胶做了一串大沙包，跟阳子二娃利军这些男孩子玩了一个中午，他好像一场都没输过，难怪他们那么崇拜他，愿意听他的话，打扫卫生什么的都不偷工减料了。今天他在语文课上读了我的作文，好高兴。</p><p>6月1日暴雨<br>思想品德课上，他给我们讲了很多城里的事情，他说城里的男孩女孩有好有坏，有听话也有不听话的，他说以后走出村子了，读初中高中，然后大学，见到城里的同龄人，不要自卑，因为我们也许没他们有钱，不能像他们那样穿好的打扮漂亮的，但一个男孩子帅不帅，还是要看有没有理想的。女孩子漂不漂亮，是要看善不善的良。他说为了爹妈去低着头，弯着腰，不丢人，但不能忘记观音村这块土地，不能忘了亲人。很多话，我都不太懂，但我都专门记在笔记薄上了，燕子她们也记了，但字没我好看。他说暑假要办一个作文小组和书法小组，我都想参加。对了，课堂上说到帅不帅的时候，二娃站起来说赵老师最帅，他脸皮真厚，一边笑一边说你们加起来都没老师帅，阳子还吹了哨子。</p><p>7月3日多云<br>老师帮我家做了农活，流了很多汗，我带着他去喝泉水，他喝了还不够，把整个脑袋都伸到了水里，抬起来后甩了甩，笑得很开心，晚上在我家吃的饭，被我爸劝了很多酒，他的脸，很像年画上的关公，走路都不稳了，还唱了很奇怪的歌，我问他，他说是京剧。</p><p>7月17日阴转晴<br>书法小组正式上课了，纸笔和墨水都是他买的。原来他不光是粉笔字好看，毛笔字也很好，他夸了晓燕的字有天赋，我们不懂天赋是什么，他就写了一个赋字，拆开来跟我们解释了。我的圆珠笔字是班上最好的，但毛笔好像没有“天赋”，他没有夸我。</p><p>9月1日阳光灿烂<br>终于正式开学了，张许褚（我一开始不知道褚怎么写，是下课后偷偷问他的，他笑着教我怎么写，还摸了摸我的头，说我很用心）又在窗外偷偷听课了，他让张许褚进教室，张许褚跑开了，这家伙一直不爱说话。他用鸡毛做了一个新毽子，说要跟我们女孩子比试比试，他出丑了，暑假里，听说他去小水潭学游泳，男孩子都说赵老师只会狗刨，一个扎猛子下去，狗刨了半天，起来后还是会在原地的，真的好好笑啊。可惜我是女孩子，不能去看。</p><p>9月5日阴<br>他每天早晚都会跑步，现在张许褚跟在他屁股后边跟着跑了。张许褚以前都不会笑的，现在变了。以前我总看不起张许褚，现在觉得他挺可怜的，也很懂事，所以我再见到他，都不会故意抬着下巴不看他了，会跟他笑一下，打招呼。今天，他又抽烟了，男生都跟他一起蹲着围成一圈，看他吐烟圈，他笑着骂，把男生都赶走，说不能抽二手烟。他还说等男孩子那个什么长什么了，才允许抽烟，否则就算是躲在厕所抽烟屁股，都要被他吊起来打的。二娃特别坏，故意很大声让我们女孩子听到，二娃对他说他们都长那个啥了，不信就脱裤子给他看，他没让，然后看到我们都跑开了，就和男孩子一起大笑，这算不算他耍流氓啊？</p><p>10月1日国庆节<br>听说他晚上去张志毅家里串门，结果又喝了很多酒，回学校的时候都摔跤了，应该不会有事情吧？</p><p>11月8日<br>期中考试分数出来了，我第一次拿了第一名，他表扬了我，踢毽子的时候跟我一头，他还是没进步，我们输了，但我很开心，很开心。</p><p>2009年1月1日元旦<br>他傍晚又去山顶坐着了，我们不知道谁带的头，都跟去了，他用树叶吹了一支曲子，真好听，他还教我们吹了，但我们都学不会。</p><p>1月12日晴转雨<br>明天就是寒假了，但没有谁开心，因为他说今天是最后一天给我们上课了。我们都哭了，他没有笑，只是站在讲台上，看着我们，他说大家很快就能去新学校读书，那里有明亮的教室，有整齐的桌椅，有很多的老师。可我们还是听着听着就哭了，我是第一个哭的，然后燕子她们也哭了，最后男生们也都哭了，直到他说还会留在村里过年，我们才好点。</p><p>1月26日春节<br>他被村里每家每户拉过去吃饭喝酒，我家也请了，他跟我爸一起抽了好几根烟，我又哭了。</p><p>2月7日晴<br>他送我们来到新的学校，在新操场上，他轻轻说了一些话，但我们都只顾着哭了，我只记得他说会给我们写信的，还让我负责收信，有时间就给他回信。他走了，回家了。我喜欢你，赵老师，等我长大了，还可以喜欢你吗？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;08年2月3日阴&lt;br&gt;胡老师走了，我想世界上再没有这样的老师了。好人有好报吗？骗人的！&lt;/p&gt;
&lt;p&gt;2月4日晴&lt;br&gt;村子来了个人，好像是胡老师的男朋友，不喜欢他，因为他一年里一次都没有来看过胡老师，胡老师明显是很想他的，胡老师，那是叫思念吗？&lt;/p&gt;
&lt;p&gt;2月7日晴&lt;br&gt;胡老师的爸妈，还有那个人，都在村里过年了，听人说那个人昨天晚上喝了很多酒，在操场上吐，吐出血了，真的吗？他是在伤心吗？如果是的，我就不那么讨厌他了。&lt;/p&gt;
&lt;p&gt;2月13日大雨&lt;br&gt;那个人又去山上了，这么大雨，他不怕吗？&lt;/p&gt;</summary>
    
    
    
    <category term="读书" scheme="http://guowenfh.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="摘录" scheme="http://guowenfh.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>一个使用 react 的思想去使用 vue 的方式</title>
    <link href="http://guowenfh.github.io/2019/04/28/2019/react-development-description-vue/"/>
    <id>http://guowenfh.github.io/2019/04/28/2019/react-development-description-vue/</id>
    <published>2019-04-28T04:00:00.000Z</published>
    <updated>2020-03-12T04:04:13.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一个 react 开发者 问我 vue 如何上手开发？然后我是这么和他描述的。。<br>用 react 的思想 去考虑 vue 要怎么写。<br>本文很水。而且将来感觉一定会被打脸，期待那一天到来。</p></blockquote> <span id="more"></span><p>其实也就几块</p><ol><li>你可以把 template 就看成 react 的 render 就是写法有一些不一样，看一下 vue 的指令就可以了，当然也可以直接用 render function</li><li>data 的话 和 react 的 state 也没什么区别 , 只不过赋值方式变成了 this.setState({text:’state’})  this.text = ‘state’ （vue 有一个坑，数组里面 data: [{a:1}]  使用 this.data[0].b = 1 =&gt; data”:[{a:1,b:1}] 新增了一个b字段 这样是不会刷新页面的。react 不会有这个问题（至于怎么刷新，这个就先你自己去看文档把哈哈哈（底层实现不考虑</li><li>methods 对应的就是 react 中 class componnet 中 直接写上去的方法  onMenuClick = () =&gt; {} 这种 （vue里面不需要箭头函数</li><li>事件监听的话 @click=”onMenuClick” 和 react 中的  onClick={this.onMenuClick} 也没什么区别</li><li>生命周期 mounted 和 react 中的 componentDidMount 也基本一致（周期里面就这个最重要了 当然还有 wtach需要看一下</li><li>computed 正确的使用方式，其实就是一个纯函数，在里面写有副作用的内容，对可维护性是一个灾难（自动计算，实际上不用也没关系 （react里面就没有</li><li>其他的 就是 props components 这两个了，用法是一样的，但是得手动声明一下，按照文档来就可以</li><li>路由，vue 的路由其实更好理解，react-route@4 + react-route-config 使用上基本也一致。 只不过 router-view 换成了 renderRoutes</li><li>剩下的部分 其实就照着文档看看就行拉 <a href="https://cn.vuejs.org/v2/api/#components">https://cn.vuejs.org/v2/api/#components</a></li></ol><p>然后在组内问了一下大家的看法</p><p>Q：感觉写vue和react的思维方式不太一样?<br>A：大的说的话，一个是函数式，一个是响应式。</p><p>Q：vue比较符合常人的思维，比较好上手。同时意味着，不如react的方法抽象。watch就很有意思。<br>A：watch 是一个双刃剑吧。确实很方便…不过也容易写出来不易读或者性能很差的代码。</p><p>Q：React 的生命周期component WillReceiveProps可以拿到nextProps 这样的参数，父组件参数改变时，子组件方便监听并特殊处理。vue 中通过computed 监听数据变化并处理，感觉怪怪的<br>A：其实 componentWillReceiveProps 即将被废弃了。。。不过这个需求确实是有的 ，也就是父组件和 子组件其实都有一份state，并且父组件的状态更改会影响 子组件的state 更改的情况。 vue里面应该这个用 watch 会比较多，结合上面，其实 还是建议 computed 使用 纯函数，如果是纯函数的话，那么就不能去改子组件的 state 了 （state 改成 data 也是一样。</p><p>Q：Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到的性能<br>React 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的VDOM的重新渲染<br>A：嗯…有点偏题。 一个新人学 vue 进来应该不会考虑这个？不过基本没错</p><p>Q：computed是实现y = f（x） ，因变量只能通过这个函数得到才能用 computed吧，否则应该是有问题的。<br>A：虽然是这么说，但是你看了主站的代码就知道，这个其实不是一个强绑定。主站里面 computed 里面做有副作用的事情，也有好多- -，不是一个好的实践。（我上面说的是建议只当成纯函数来用</p><p>下一篇，</p><p>《在 vue 中使用 jsx 与 class component 的各种姿势》</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;有一个 react 开发者 问我 vue 如何上手开发？然后我是这么和他描述的。。&lt;br&gt;用 react 的思想 去考虑 vue 要怎么写。&lt;br&gt;本文很水。而且将来感觉一定会被打脸，期待那一天到来。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="react" scheme="http://guowenfh.github.io/categories/react/"/>
    
    <category term="vue" scheme="http://guowenfh.github.io/categories/react/vue/"/>
    
    
    <category term="vue" scheme="http://guowenfh.github.io/tags/vue/"/>
    
    <category term="react" scheme="http://guowenfh.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 项目构建</title>
    <link href="http://guowenfh.github.io/2019/04/11/2019/webpack-build-config/"/>
    <id>http://guowenfh.github.io/2019/04/11/2019/webpack-build-config/</id>
    <published>2019-04-11T04:00:00.000Z</published>
    <updated>2020-03-12T04:04:13.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在很久之前在知乎回答过一个问题：<a href="https://www.zhihu.com/question/263620922/answer/273687900">公司要求统一一套前端脚手架，该怎么选择？</a> 在那个时候推荐了使用了魔改 <code>vue-cli@2</code> 来实现 <code>react</code> 的基础脚手架，让 <code>react</code> 以及 <code>vue</code> 能够基本使用同一个模式的脚手架。<br>在之后也将他开源了出来：<a href="https://github.com/guowenfh/vue-cli-react-base/tree/base">vue-cli-react-base 最基础的实现</a></p></blockquote> <span id="more"></span><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>在之前开源版本 <code>vue-cli-react-base</code> 的实现中只完成了和 <code>create-react-app</code> 构建出来的一样包含 react 运行最基础的功能。</p><p>最近回过头再再看，也一直在思考，一个面向于<strong>企业内部</strong>的项目脚手架到底有什么样的需求？</p><p>是如同 <code>vue-cli@2</code> 和 <code>create-react-app</code> 一样的嘛？只实现最基础的功能，所有的扩展（路由，数据管理，ui 库，目录结构约定），都交给开发者去完成。</p><p>感觉并不够。</p><p>还是如同 <a href="https://umijs.org/zh/guide/">umijs</a> 或者 <a href="https://nextjs.org/docs/">nextjs</a> 一样？开箱即用，有约定式路由，代码自动分割，在预定义的同时也支持 自定义扩展 <code>webpack</code> 配置达到用户的需求。</p><p>这样好像还不错。拿过来直接就可以开发项目了。</p><p>但是 他们的自定义扩展 <code>webpack</code> 真的足够方便吗？他们本身带来的学习成本呢？</p><p>基于这种思考，我开始尝试的去做这样一个事情。 把 <code>vue-cli-react-base</code> 一个基本完整的项目开发骨架给搭建起来。</p><p>于是最近开始基于他进行了一些改造。</p><p>如下：</p><h2 id="vue-cli-react-base"><a href="#vue-cli-react-base" class="headerlink" title="vue-cli-react-base"></a>vue-cli-react-base</h2><blockquote><p><a href="https://github.com/guowenfh/vue-cli-react-base/">vue-cli-react-base github</a><br>使用 vue-cli@2 驱动的 react 项目<br>使用 webpack@4 + babel@7 + (css/less module) + prettier 来构建</p></blockquote><p>支持 module.css / module.less 等 css module 语法，推荐使用 <code>npm i -S classnames</code> 库来更好的使用 css module</p><p>内置了 <code>husky</code> 与 <code>eslint-config-standard</code> 与 <code>prettier-eslint</code> 来运行 <code>git commit</code> 时代码的自动格式化。自动格式化 使用了 <code>standard</code> 的代码风格</p><p>状态管理工具方面使用 <code>@rematch</code> , 并且内置了插件 <code>@rematch/immer</code> 以及 <code>@rematch/loading</code></p><p>具体使用方式参考: <a href="https://rematch.gitbook.io/handbook/cha-jian">Rematch实践指南</a></p><p>内置了组件库 <code>antd</code> 结合 <code>babel-plugin-import</code> 做了组件（<code>lodash</code>也可以）的按需引入 (直接修改 <code>src/theme.js</code> 可以修改主题色)。当然要用别的组件库也是可行的，需要改的东西很少不是嘛？</p><p>使用 <code>react-router-config</code> 来达到和 <code>vue-router</code> 类似的体验。</p><p>结合 <code>react-loadable</code> 与 <code>import()</code> 实现了路由的按需加载</p><p><code>package.json</code> 使用了 <code>~</code> 版本，来尽量保证安装时依赖升级导致项目报错问题</p><p>对于 <code>mock</code> 数据的需求，使用<code>npm run dev-mock</code>启动服务，实现了两种途径的mock数据：</p><ol><li>直接 <code>webpack-dev-server</code> 提供的 <code>proxyTable</code></li><li>使用本地 <code>mock</code> 数据，在 <code>mocker</code>文件夹下，修改添加即可， 或者使用 <code>easymock</code> 这样类似的在线 mock 服务，基于这样的需求实现了一个 <code>apiProxy</code> 的高阶函数，提供了本地mock的支持，当然他也能够比较方便的进行各种需求的改造。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截请求函数，只在 开发并且开启了mock的情况下启用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">fn</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;fn&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> apiProxy = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> &amp;&amp; process.env.mock === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">url, data = &#123;&#125;, otherOptions = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">&#x27;../mocker/index&#x27;</span>).then(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: mocker &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果未找到 mock 对应的数据的情况依旧走老代码</span></span><br><span class="line">        <span class="keyword">if</span> (!mocker[url]) &#123;</span><br><span class="line">          <span class="keyword">return</span> fn.call(<span class="built_in">this</span>, url, data, otherOptions)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> isFn = <span class="keyword">typeof</span> mocker[url] === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">        <span class="comment">// 如果是一个函数那么一定要返回 Promise</span></span><br><span class="line">        <span class="keyword">if</span> (isFn) &#123;</span><br><span class="line">          <span class="keyword">return</span> mocker[url](data)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他情况，直接使用Promsie返回值</span></span><br><span class="line">        <span class="keyword">return</span> mocker[url]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是对于企业内部项目脚手架思考的一些产出，不过又在想是不是，整个 webapck 所有的配置全部都被暴露了出来，和 目前 <code>create-react-app</code> 以及 <code>vue-cli@3</code> 的设计思路感觉还是不太相符啊，隐藏实现细节，暴露更改接口。能在底层升级的情况下，无需改动（大部分时候）上层业务的接口修改</p><p>基于这样的思考又结合上面的实现 于是又有了另外一个项目：</p><h2 id="cra-config-create-app"><a href="#cra-config-create-app" class="headerlink" title="cra-config-create-app"></a>cra-config-create-app</h2><blockquote><p><a href="https://github.com/guowenfh/cra-config-create-app">cra-config-create-app</a><br>一个基于 create-react-app 和 react-app-rewired 开箱即用的一个基础项目骨架。<br>本项目想法源自于 既希望能直接享受到 cra 带来的可升级的机制，<br>又能够和 vue-cli@2 一样支持一些基础的配置项，<br>于是利用 react-app-rewired 和 环境变量 的支持 把部分选项直接写成了配置项。<br>支持直接修改配置项使用。</p></blockquote><p>具体已经实现的功能和 上面的项目是一致的，但是这个能够享受到 create-react-app 升级 带来的一些特性和优化支持。（比如 create-react-app 快发布 3.0了。。）</p><p>当需要写入使用的全局环境变量时，需使用 <code>process.env.REACT_APP_XXX = xxx</code> 形式才能拿到。 （只支持字符串）</p><p>使用 <code>%REACT_APP_XXX%</code> 方式获取</p><p>已经支持的配置如下： <code>cra-config/config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">&#x27;@&#x27;</span>: resolveApp(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 开发环境</span></span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用 https 的构建</span></span><br><span class="line"><span class="comment">     * 修改 host， port 等。</span></span><br><span class="line"><span class="comment">     * 如果 process.env.xxx 有对应的值，那么会覆盖这里的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HTTPS: <span class="literal">false</span>,</span><br><span class="line">    HOST: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    PORT: <span class="number">5000</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     s* 在 webpack 中 是否启用 eslint 检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    useEslint: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否自动打开浏览器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    autoOpenBrowser: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地服务器代理的配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    proxyTable: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 构建正式</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 webpack 中 是否启用 eslint 检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    useEslint: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建时打包文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    appBuild: resolveApp(<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用 sourcemap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    productionSourceMap: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体文章说得比较散，因为对于企业内部，一个完备靠谱的的上线项目来说，仅仅是上面提到的点，感觉还是远远不够的，发布部署流程，分支合并策略。函数命名规范，甚至函数体的最大行数等等。</p><p>这让我想起了某一次听到 月影 说的一句话：框架的出现，不是让能力强的人写出来更好的代码，而是让能力没那么好的人，能够写出来没那么差的代码。</p><p>加油共勉！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在很久之前在知乎回答过一个问题：&lt;a href=&quot;https://www.zhihu.com/question/263620922/answer/273687900&quot;&gt;公司要求统一一套前端脚手架，该怎么选择？&lt;/a&gt; 在那个时候推荐了使用了魔改 &lt;code&gt;vue-cli@2&lt;/code&gt; 来实现 &lt;code&gt;react&lt;/code&gt; 的基础脚手架，让 &lt;code&gt;react&lt;/code&gt; 以及 &lt;code&gt;vue&lt;/code&gt; 能够基本使用同一个模式的脚手架。&lt;br&gt;在之后也将他开源了出来：&lt;a href=&quot;https://github.com/guowenfh/vue-cli-react-base/tree/base&quot;&gt;vue-cli-react-base 最基础的实现&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="构建" scheme="http://guowenfh.github.io/categories/%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
    <category term="react" scheme="http://guowenfh.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>从一个简单的实例看 JavaScript 的异步编程进化历</title>
    <link href="http://guowenfh.github.io/2018/09/03/2018/javascript-async/"/>
    <id>http://guowenfh.github.io/2018/09/03/2018/javascript-async/</id>
    <published>2018-09-03T06:32:24.000Z</published>
    <updated>2020-03-12T04:04:13.274Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuwvkqjzvdj30k00bnmym.jpg" alt="回调地狱"></p><blockquote><p>很久没有进行过创作了，也感觉到了自己的不足。这一篇文章是对于 JavaScript 异步编程的一个 整理<br>希望自己更多的成为一个创造者，而不是只会看，会用，还需要深入理解到原理吧。</p></blockquote><p>例子如下：</p><blockquote><p>我们有 A, B, C, D 四个请求获取数据的函数（函数自己实现），<br>C 依赖 B 的结果，D 依赖 ABC 的结果，最终输出 D 的结果。</p></blockquote><span id="more"></span><h3 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">callbak</span>) </span>&#123;</span><br><span class="line">  ajax(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    callbak(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">callbak</span>) </span>&#123;</span><br><span class="line">  ajax(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    callbak(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">  ajax(url, data, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    callbak(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">data1, data2, data3, callback</span>) </span>&#123;</span><br><span class="line">  ajax(url, &#123; data1, data2, data3 &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    callbak(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(<span class="function"><span class="keyword">function</span>(<span class="params">resa</span>) </span>&#123;</span><br><span class="line">  B(<span class="function"><span class="keyword">function</span>(<span class="params">resb</span>) </span>&#123;</span><br><span class="line">    C(resb, <span class="function"><span class="keyword">function</span>(<span class="params">resc</span>) </span>&#123;</span><br><span class="line">      D(resa, resb, resc, <span class="function"><span class="keyword">function</span>(<span class="params">resd</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>emm…代码还是能运行，但是写法丑陋，回调地狱，如果还有请求依赖，得继续回调嵌套<br>性能太差，没有考虑 A 和 B 实际上是可以并发的。</p><h3 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h3><p>函数基础实现如同例子一，但是考虑 A,B 可以并发的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">let</span> resa = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">A(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  resa = res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">B(<span class="function"><span class="params">resb</span> =&gt;</span> &#123;</span><br><span class="line">  C(resb, <span class="function"><span class="params">resc</span> =&gt;</span> &#123;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (resa) &#123;</span><br><span class="line">        D(resa, resb, resc, <span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">          timer &amp;&amp; <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>考虑了 A,B 的并发，使用 setInterval 轮询实现，并不一定实时。性能太差。</p><h3 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> resa = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> resb = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> resc = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count--;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">    D(resa, resb, resc, <span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  resa = res;</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line">B(<span class="function"><span class="params">datab</span> =&gt;</span> &#123;</span><br><span class="line">  C(datab, <span class="function"><span class="params">datac</span> =&gt;</span> &#123;</span><br><span class="line">    resb = datab;</span><br><span class="line">    resc = datac;</span><br><span class="line">    done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 计数器实现。性能没什么问题，但是 封装太差，写法恶心。</p><h3 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现并发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parallel</span>(<span class="params">tasks, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = tasks.length;</span><br><span class="line">  <span class="keyword">let</span> all = [];</span><br><span class="line">  tasks.forEach(<span class="function">(<span class="params">fn, index</span>) =&gt;</span> &#123;</span><br><span class="line">    fn(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      all[index] = res;</span><br><span class="line">      count--;</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">        callback(all);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现串行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">tasks, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = tasks.length;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> task = tasks.shift();</span><br><span class="line">    task.apply(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      args.concat([</span><br><span class="line">        (...res) =&gt; &#123;</span><br><span class="line">          count--;</span><br><span class="line">          <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(res);</span><br><span class="line">          &#125;</span><br><span class="line">          loop(...res);</span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  loop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">cb = () =&gt; &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">cb = () =&gt; &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">datab, cb = () =&gt; &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(datab, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">data, datab, datac, cb = () =&gt; &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  cb(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">parallel(</span><br><span class="line">  [</span><br><span class="line">    A,</span><br><span class="line">    cb =&gt; &#123;</span><br><span class="line">      waterfall([B, C], <span class="function">(<span class="params">datab, datac</span>) =&gt;</span> &#123;</span><br><span class="line">        cb(datab, datac);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  data =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [resa, [resb, resc]] = data;</span><br><span class="line">    D(resa, resb, resc, <span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>模仿 async.js 提炼出来了 waterfall，parallel，两个流程控制函数。还不错。<br>但是写法还是麻烦，对于 A,B,C 的实现有要求。得自己考虑好每一次 callback 的值。</p><p><strong>async.js</strong> 是我认为在目前 JavaScript callback 的终极解决方案了（没用过 fib.js..</p><p>推荐查看 <a href="https://github.com/caolan/async">github async.js</a> 源码。</p><p>waterfall 可以考虑使用函数式的形式实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipe</span>(<span class="params">...fnList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fn = fnList.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...subArgs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.apply(<span class="built_in">this</span>, [].concat(subArgs, a));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子五"><a href="#例子五" class="headerlink" title="例子五"></a>例子五</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">&quot;http://google.com&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all[(A(), B().then(<span class="function"><span class="params">b</span> =&gt;</span> C(b)))]</span><br><span class="line">  .then(<span class="function">(<span class="params">[resa,&#123;resb,resc&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> D(resa,resb,resc);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>使用 Promise 来代替 之前的 callback。好评。<br>用 Promise.all 来控制并发，使用 .then 串行请求，整体看起来非常舒服了，脱离了回调地狱。</p><h3 id="例子六"><a href="#例子六" class="headerlink" title="例子六"></a>例子六</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">datab, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">dataa, datab, datac, cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunk</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">      fn.call(<span class="built_in">this</span>, ...args, callback);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduler</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gen = fn();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = gen.next(data);</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 如果没结束就继续执行</span></span><br><span class="line">    result.value(next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator 实际代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> resa = <span class="keyword">yield</span> thunk(A)();</span><br><span class="line">  <span class="keyword">const</span> resb = <span class="keyword">yield</span> thunk(B)();</span><br><span class="line">  <span class="keyword">const</span> resc = <span class="keyword">yield</span> thunk(C)(resb);</span><br><span class="line">  <span class="keyword">const</span> resd = <span class="keyword">yield</span> thunk(D)(resa, resb, resc);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scheduler(generatorTask);</span><br></pre></td></tr></table></figure><p>使用 generator + callback 来控制流程顺序，还是同步写法，看起来还是挺牛逼的。<br>但是 generator 不会自动执行，需要自己手动写一个执行器，并且依赖于 thunk 函数。麻烦！<br>等等。。又全变成了串行？垃圾</p><h3 id="例子七"><a href="#例子七" class="headerlink" title="例子七"></a>例子七</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      r(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      r(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">datab</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      r(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">dataa, datab, datac</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      r(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduler</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gen = fn();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = gen.next(data);</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 如果没结束就继续执行</span></span><br><span class="line">    result.value.then(next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator 实际代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [resa, &#123; resb, resc &#125;] = <span class="keyword">yield</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">    A(),</span><br><span class="line">    B().then(<span class="function"><span class="params">resb</span> =&gt;</span> C(resb).then(<span class="function"><span class="params">resc</span> =&gt;</span> (&#123; resb, resc &#125;)))</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">const</span> resd = <span class="keyword">yield</span> D(resa, resb, resc);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resa, resb, resc, resd);</span><br><span class="line">  <span class="keyword">return</span> resd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scheduler(generatorTask);</span><br></pre></td></tr></table></figure><p>抛弃了 thunk 函数，修改了一下 A，B，C，D。的实现以及 generator 执行函数 scheduler。 结合了 Promise 重新实现了并发和串行。<br>再等等？？好麻烦啊。。然后并发好像和 generator 没什么关系吧。果然还是 Promise 大法好。</p><p>关于 generator 的自动执行建议直接看 <a href="https://github.com/tj/co">github tj/co</a> 的源码。</p><h3 id="例子八"><a href="#例子八" class="headerlink" title="例子八"></a>例子八</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">&quot;http://google.com&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...B,C,D</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> resa = <span class="keyword">await</span> A();</span><br><span class="line">  <span class="keyword">const</span> resb = <span class="keyword">await</span> B();</span><br><span class="line">  <span class="keyword">const</span> resc = <span class="keyword">await</span> C(resb);</span><br><span class="line">  <span class="keyword">const</span> resd = <span class="keyword">await</span> D(resa, resb, resc);</span><br><span class="line">  <span class="keyword">return</span> resd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncTask().then(<span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 Promise 结合 async/await 的形式 ，看起来非常简洁。也不用自己写执行器了，舒服。<br>但是和上面有几个版本出现了一样的问题，没有考虑并发的情况，导致性能下降。</p><h3 id="例子九，终极方案？"><a href="#例子九，终极方案？" class="headerlink" title="例子九，终极方案？"></a>例子九，终极方案？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...B,C,D</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncBC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> resb = <span class="keyword">await</span> B();</span><br><span class="line">  <span class="keyword">const</span> resc = <span class="keyword">await</span> c(resb);</span><br><span class="line">  <span class="keyword">return</span> &#123; resb, resc &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const [resa,&#123;resb,resc&#125;] = await Promise.all([A(), B().then(resb=&gt;C(resb)]);</span></span><br><span class="line">  <span class="keyword">const</span> [resa, &#123; resb, resc &#125;] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([A(), asyncBC()]);</span><br><span class="line">  <span class="keyword">const</span> resd = <span class="keyword">await</span> D(resa, resb, resc);</span><br><span class="line">  <span class="keyword">return</span> resd;</span><br><span class="line">&#125;</span><br><span class="line">asyncTask().then(<span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 Promise.all 结合 async/await 的形式，考虑了并发和串行，写法简洁。<br>应该算是目前的终极方案了。 async/await 作为 generator 语法糖还是非常的甜的。</p><h3 id="例子十-使用-RxJs"><a href="#例子十-使用-RxJs" class="headerlink" title="例子十 使用 RxJs"></a>例子十 使用 RxJs</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defer, forkJoin &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mergeMap, map &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/operators&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">&quot;https://cnodejs.org/api/v1/topics&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">&quot;https://cnodejs.org/api/v1/topics&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">&quot;https://cnodejs.org/api/v1/topics&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">&quot;https://cnodejs.org/api/v1/topics&quot;</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> [...args, res]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A, B, C, D 函数必须返回 Promise</span></span><br><span class="line"><span class="comment">// 使用 defer 产生一个 Observable</span></span><br><span class="line"><span class="keyword">const</span> A$ = defer(<span class="function">() =&gt;</span> A());</span><br><span class="line"><span class="comment">// pipe 类型 Promise 链中 的 then</span></span><br><span class="line"><span class="keyword">const</span> BC$ = defer(<span class="function">() =&gt;</span> B()).pipe(</span><br><span class="line">  <span class="comment">// mergeMap 映射成 promise 并发出结果</span></span><br><span class="line">  mergeMap(<span class="function"><span class="params">resB</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 map 产生新值</span></span><br><span class="line">    <span class="keyword">return</span> defer(<span class="function">() =&gt;</span> C(resB)).pipe(map(<span class="function"><span class="params">resC</span> =&gt;</span> [resB, resC]));</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// forkJoin 类似 Promise.all 并发执行多个 Observable</span></span><br><span class="line">forkJoin(A$, BC$)</span><br><span class="line">  .pipe(mergeMap(<span class="function">(<span class="params">[resa, [resb, resc]]</span>) =&gt;</span> D(resa, resb, resc)))</span><br><span class="line">  .subscribe(<span class="function"><span class="params">resd</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;this is D result:&quot;</span>, resd); <span class="comment">// &lt;------- fnD 返回的结果</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>使用 rxjs 来构建流式的请求过程。结构还是非常清晰的，但是相对繁琐，概念也比 原生的 Promise 和 await 要多</p><p>不过 rxjs 操作符巨多，掌握之后，可以做更多的事情</p><hr><p>结语：</p><p>从上面几个例子我们可以窥探到 JavaScript 对于异步编程体验的一个非常大的进步。</p><p>但是同时我们其实可以看到不论是 generator 还是 async/await。其实更多的是基于 Promise 之上的一些语法简化。<br>没有从 callback 过渡到 Promise 的时候那种真正心灵上的愉悦。</p><blockquote><p>感谢 @墨水 之前在内部分享提供的 demo 版本。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/0069RVTdgy1fuwvkqjzvdj30k00bnmym.jpg&quot; alt=&quot;回调地狱&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很久没有进行过创作了，也感觉到了自己的不足。这一篇文章是对于 JavaScript 异步编程的一个 整理&lt;br&gt;希望自己更多的成为一个创造者，而不是只会看，会用，还需要深入理解到原理吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们有 A, B, C, D 四个请求获取数据的函数（函数自己实现），&lt;br&gt;C 依赖 B 的结果，D 依赖 ABC 的结果，最终输出 D 的结果。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="异步编程" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
    <category term="异步编程" scheme="http://guowenfh.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Promise" scheme="http://guowenfh.github.io/tags/Promise/"/>
    
    <category term="async" scheme="http://guowenfh.github.io/tags/async/"/>
    
    <category term="generator" scheme="http://guowenfh.github.io/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑之旅（零）简介与升级</title>
    <link href="http://guowenfh.github.io/2018/08/05/vue-webpack-00/"/>
    <id>http://guowenfh.github.io/2018/08/05/vue-webpack-00/</id>
    <published>2018-08-05T10:34:58.000Z</published>
    <updated>2020-03-12T04:04:13.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-基础中的基础。"><a href="#webpack-基础中的基础。" class="headerlink" title="webpack 基础中的基础。"></a>webpack 基础中的基础。</h2><p>升级了一下两年前写的这个教程，前端变化太快了，里面很多示例已经跑步起来，终于愿意花时间来更新一下了。非常基础！！</p><p>记录 vue-webapck 的学习基础，代码示例 <a href="https://github.com/guowenfh/vue-webpack">github地址</a></p><p><strong>2018-08-05最新更新： 本教程已升级至 webpack4 ，旧的代码在 webpack1-backup 分支。将原来教程中部分不正确的地方也已经剔除。不过难免还有错误之处，欢迎指正。</strong></p><p>代码示例位于 webpack 文件夹中。已经把所有练习的<code>node_modules</code>移除，若要正常使用，请安装运行<code>npm install #推荐 cnpm </code>。</p><p>然后再根据文中的指令，进行打包、编译等操作。重要的是在运行过程中体会。学习。</p><p>教程目录:</p><ul><li><a href="//guowenfh.github.io/2016/03/24/vue-webpack-01-base/">webpack入坑之旅（一）不是开始的开始</a></li><li><a href="//guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/">webpack入坑之旅（二）loader入门</a></li><li><a href="//guowenfh.github.io/2016/03/24/vue-webpack-03-config/">webpack入坑之旅（三）webpack.config入门</a></li><li><a href="//guowenfh.github.io/2016/03/24/vue-webpack-04-custom/">webpack入坑之旅（四）扬帆起航</a></li><li><a href="//guowenfh.github.io/2016/03/25/vue-webpack-05-vue/">webpack入坑之旅（五）加载vue单文件组件</a></li><li><a href="//guowenfh.github.io/2016/03/28/vue-webpack-06-router/">webpack入坑之旅（六）配合vue-router实现SPA</a></li></ul><span id="more"></span><p>这个教程更多的是从基础开始学习，vue 与 webpack 应该要怎么结合。在真实的实际项目中，还是推荐 vue-cli。</p><p>关于 vue-cli 生成的配置解析可以参考一下 <a href="https://github.com/DDFE/DDFE-blog/issues/10">vue-cli#2.0 webpack 配置分析</a></p><hr><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><p>对于 <strong>react</strong> 可以考虑使用我基于 vue-cli 生成的配置修改的 react 版本 <a href="https://github.com/guowenfh/vue-cli-react-base">vue-cli-react-base</a>。</p><p>使用 vue-cli 类似的配置与命令，来驱动 react 项目，在 router 分支也有 使用 react + router + antd 的例子</p><p>若是有什么地方，没有写对的，也请大家指出，帮忙改进，谢谢！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;webpack-基础中的基础。&quot;&gt;&lt;a href=&quot;#webpack-基础中的基础。&quot; class=&quot;headerlink&quot; title=&quot;webpack 基础中的基础。&quot;&gt;&lt;/a&gt;webpack 基础中的基础。&lt;/h2&gt;&lt;p&gt;升级了一下两年前写的这个教程，前端变化太快了，里面很多示例已经跑步起来，终于愿意花时间来更新一下了。非常基础！！&lt;/p&gt;
&lt;p&gt;记录 vue-webapck 的学习基础，代码示例 &lt;a href=&quot;https://github.com/guowenfh/vue-webpack&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018-08-05最新更新： 本教程已升级至 webpack4 ，旧的代码在 webpack1-backup 分支。将原来教程中部分不正确的地方也已经剔除。不过难免还有错误之处，欢迎指正。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码示例位于 webpack 文件夹中。已经把所有练习的&lt;code&gt;node_modules&lt;/code&gt;移除，若要正常使用，请安装运行&lt;code&gt;npm install #推荐 cnpm &lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后再根据文中的指令，进行打包、编译等操作。重要的是在运行过程中体会。学习。&lt;/p&gt;
&lt;p&gt;教程目录:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;//guowenfh.github.io/2016/03/24/vue-webpack-01-base/&quot;&gt;webpack入坑之旅（一）不是开始的开始&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//guowenfh.github.io/2016/03/24/vue-webpack-02-deploy/&quot;&gt;webpack入坑之旅（二）loader入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//guowenfh.github.io/2016/03/24/vue-webpack-03-config/&quot;&gt;webpack入坑之旅（三）webpack.config入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//guowenfh.github.io/2016/03/24/vue-webpack-04-custom/&quot;&gt;webpack入坑之旅（四）扬帆起航&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//guowenfh.github.io/2016/03/25/vue-webpack-05-vue/&quot;&gt;webpack入坑之旅（五）加载vue单文件组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//guowenfh.github.io/2016/03/28/vue-webpack-06-router/&quot;&gt;webpack入坑之旅（六）配合vue-router实现SPA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端框架" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="webpack" scheme="http://guowenfh.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>中文播客推荐</title>
    <link href="http://guowenfh.github.io/2018/06/16/2018/podcast-recommend/"/>
    <id>http://guowenfh.github.io/2018/06/16/2018/podcast-recommend/</id>
    <published>2018-06-16T07:20:22.000Z</published>
    <updated>2021-03-06T03:37:13.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从大学时期听书开始，慢慢接触到更多的播客。听一些人讲故事，讲技术，感觉也是一个非常不错的了解世界的途径。已经成为我生活中的一部分。不过从身边感觉到播客还是比较小众的。于是想推荐一下我在听的一些播客吧。<br>引用一句《内核恐慌》的话作为推荐语：“我们虽然号称 Hacker ，但是也没有干货，想听的人就听，不想听的人就别听。”</p></blockquote><p>推荐播客客户端： Moon FM，播客，小宇宙，player.fm</p><h2 id="IT-技术主题"><a href="#IT-技术主题" class="headerlink" title="IT 技术主题"></a>IT 技术主题</h2><h3 id="《内核恐慌》"><a href="#《内核恐慌》" class="headerlink" title="《内核恐慌》"></a>《内核恐慌》</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fpp7nosof8j3074074dfr.jpg" alt="内核恐慌"></p><blockquote><p>《内核恐慌》(Kernel Panic) 是吴涛和 Rio 做的播客，首播于 2014 年 10 月。号称硬核，可也没什么干货。想听的人听，不想听的人就别听。</p></blockquote><p><a href="https://kernelpanic.fm/feed">rss</a></p><p>推荐：</p><ul><li>类型系统</li><li>并发与异步</li><li>数学与编程</li></ul><span id="more"></span><h3 id="《Teahour-fm》"><a href="#《Teahour-fm》" class="headerlink" title="《Teahour.fm》"></a>《Teahour.fm》</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fpp7qltxu1j3074074746.jpg" alt="Teahour.fm"></p><blockquote><p>Teahour.fm 专注程序员感兴趣的话题，包括 Web 设计和开发，移动应用设计和开发，创业以及一切 Geek 的话题。</p></blockquote><p><a href="http://teahour.fm/feed.xml">rss</a></p><p>推荐：</p><ul><li>和 PingCAP CTO 畅谈数据库和编程语言（rust &amp; go</li><li>和 Vue.js 框架的作者聊聊前端框架开发背后的故事</li><li>与百姓网架构师艾芙聊职业发展和工程师文化</li></ul><h3 id="《代码时间》【已停更】"><a href="#《代码时间》【已停更】" class="headerlink" title="《代码时间》【已停更】"></a>《代码时间》【已停更】</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpp7rxhdknj3074074aa6.jpg" alt="代码时间"></p><blockquote><p>代码时间是一个面向程序员的中文播客节目, 致力于通过语音的方式传播程序员的正能量。 节目的shownotes请移步节目主页。</p></blockquote><p><a href="http://www.ximalaya.com/album/4867505.xml">rss</a></p><p>推荐：</p><ul><li>ES2015（上） - 贺师俊</li><li>ES2015（下） - 贺师俊</li><li>Clojure编程语言 – Loretta</li></ul><h3 id="ggtalk"><a href="#ggtalk" class="headerlink" title="ggtalk"></a>ggtalk</h3><blockquote><p>接地气、有价值的闲聊节目。一帮程序员，在无尽的接需求写代码改 bug 加班上线循环中开辟出来的一块空地，想想过去，聊聊现在，偶尔也展望一下未来。<br>头发越来越少，经验越来越多；颈椎开始僵硬，头脑依然灵活。代码写多了就想尝试点新东西，聊技术，聊工作，聊生活。挤地铁？又堵车？随便点一期吧，听个乐呵。</p></blockquote><p><a href="https://talkcdn.swift.gg/static/rss.xml">rss</a></p><p>推荐：</p><ul><li> 聊聊跑步这件小事</li><li> 游戏加速纵横谈</li></ul><h2 id="商业科技相关"><a href="#商业科技相关" class="headerlink" title="商业科技相关"></a>商业科技相关</h2><h3 id="《疯投圈》"><a href="#《疯投圈》" class="headerlink" title="《疯投圈》"></a>《疯投圈》</h3><p><img src="https://crazy.capital/assets/icon-crazycapital.svg" alt="疯投圈"></p><blockquote><p>《疯投圈》是一档为创业者、投资人、分析师，以及任何对创业、投资有兴趣的人准备的播客节目。每期节目我们为你深度解剖创投行业新动向。</p></blockquote><p><a href="https://crazy.capital/feed">rss</a></p><p>推荐：</p><ul><li>再谈出海电商的全球机遇</li><li>复杂服务行业如何平台化</li><li>拼多多=中国的 Costco ？</li></ul><h3 id="比特新声"><a href="#比特新声" class="headerlink" title="比特新声"></a>比特新声</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpp80syntxj3074074a9z.jpg" alt="比特新声"></p><blockquote><p>《比特新声》是由郝海龙和有才主持的中文科技类播客。在节目中，我们会尽量避免不加解释地使用过于抽象的科技术语，力争让每一个有独立思考能力的人听懂我们的节目。我们坚信凡实验性的东西都有一种独特的魅力，好奇心是第一生产力，同时希望用不同的观点去描述我们所处的时代。</p></blockquote><p><a href="http://banlan.show/bitvoice.rss">rss</a></p><p>推荐：</p><ul><li>一个拥有多线程超能力的开发者应该是什么样的？</li></ul><h3 id="迟早更新"><a href="#迟早更新" class="headerlink" title="迟早更新"></a>迟早更新</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fpp82mz16sj3074074mx1.jpg" alt="迟早更新"></p><blockquote><p>「迟早更新」是一档探讨科技、商业、设计和生活之间混沌关系的播客节目，也是风险基金 ONES Ventures 关于热情、趣味和好奇心的音频记录。我们希望通过这档播客，能让熟悉的事物变得新鲜，让新鲜的事物变得熟悉。</p></blockquote><p><a href="http://www.lizhi.fm/rss/1728291.xml"></a></p><p><a href="http://yitianshijie.net/rss">rss</a></p><h3 id="字谈字畅"><a href="#字谈字畅" class="headerlink" title="字谈字畅"></a>字谈字畅</h3><blockquote><p>《字谈字畅》是第一档用华语制作的字体排印主题播客节目，由 Eric Liu 与钱争予搭档主播。Type is Beautiful 出品。</p></blockquote><p> <a href="https://www.typeisbeautiful.com/feed/typechat/">rss</a></p><h3 id="声东击西"><a href="#声东击西" class="headerlink" title="声东击西"></a>声东击西</h3><blockquote><p>我们聊技术和创新，也聊文化和电影，这里有一手的现场观察和体验，还有不定期出现的神秘嘉宾。你可以感受星战粉丝大会现场的沸腾，也能想象一下未来世界里的出行，以及美国年轻人都在关心什么新鲜事儿。</p></blockquote><p><a href="http://www.etw.fm/rss">rss</a></p><p>推荐：</p><ul><li>Airbnb 上篇：你不仅能住在别人家，还有人带你玩</li></ul><h3 id="Checked-【已停更】"><a href="#Checked-【已停更】" class="headerlink" title="Checked 【已停更】"></a>Checked 【已停更】</h3><blockquote><p>以科技提升效率，用效率改变生活。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fs7jzi9l78j303k03k3yi.jpg"></p></blockquote><p> <a href="http://checked.fm/feed/podcast">rss</a></p><p>推荐：</p><ul><li>日历/待办事项/GTD</li><li>访谈「也谈钱」: 你的钱是可以给你赚钱的</li><li>Pin 开发者——钟颖访谈</li></ul><h3 id="《IT-公论》"><a href="#《IT-公论》" class="headerlink" title="《IT 公论》"></a>《IT 公论》</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpp7tulyz3j3074074jrb.jpg" alt="IT 公论"></p><blockquote><p>《IT 公论》由 IPN 出品、不鸟万如一和 Rio 主持，首播于二零一三年十一月。本节目系一种综合性之科技节目。收听对象，并不限于社会上某一阶层。凡职业部门不同，知识水准互异，而对于科技有共同兴趣者，从任何角度，收听此秀，不致味同嚼蜡，毫无所得。一切题材，即就雅俗两极之范围内，伸缩去取，尽量适用多方面之需要，以求俗不伤雅，雅不背时。科技播客，非奇技淫巧之表现也，亦非粉黑二元论争也。盖科技与吾人之关系至密至切，而欲其适合各人之需要，不悖于美之真义，则软件式款，与夫工作生活之配合，用例之转换，必有相当研究方克能之。而欲吾人乐愿研究之，则对于科技之兴趣，必先有以引起之，此《IT 公论》之滥觞也。二零一六年四月停播。</p></blockquote><p><a href="https://itgonglun.com/rss">rss</a></p><h3 id="WEB-VIEW"><a href="#WEB-VIEW" class="headerlink" title="WEB VIEW"></a>WEB VIEW</h3><blockquote><p>「不囿于 WEB，不止于 VIEW」，WEB VIEW 是由王隐和敬礼主持的一档泛科技播客。节目中我们谨慎考量技术进步所带来的优缺点，提倡用「人治」的方法重新审视我们的日常生活。</p></blockquote><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g3hew7acxfj30e80e80tg.jpg"></p><h3 id="枫言枫语"><a href="#枫言枫语" class="headerlink" title="枫言枫语"></a>枫言枫语</h3><blockquote><p>听见科技与人文的声音。</p></blockquote><h2 id="看看世界"><a href="#看看世界" class="headerlink" title="看看世界"></a>看看世界</h2><h3 id="博物志"><a href="#博物志" class="headerlink" title="博物志"></a>博物志</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpp7nimt7rj3074074glh.jpg" alt="博物志"></p><p><a href="https://museelogue.fireside.fm/rss">rss</a></p><h3 id="灭茶苦茶"><a href="#灭茶苦茶" class="headerlink" title="灭茶苦茶"></a>灭茶苦茶</h3><blockquote><p>不伦不类、不易流行。了解日本是不够的，我们要活用日本。不鳥萬如一主理，IPN 出品。</p></blockquote><p><a href="http://miechakucha.com/rss">rss</a></p><h3 id="一天世界"><a href="#一天世界" class="headerlink" title="一天世界"></a>一天世界</h3><blockquote><p>一天世界，昆乱不挡。不鳥萬如一主理。IPN 出品。<a href="http://blog.yitianshijie.net/">《一天世界》博客</a></p></blockquote><h3 id="海螺电台"><a href="#海螺电台" class="headerlink" title="海螺电台"></a>海螺电台</h3><blockquote><p>[海螺电台] 播客是一个记录行动和探索过程的创作计划</p></blockquote><p>推荐：</p><ul><li>纵使强风起，人生不言弃（箱根山岳险天下！）</li><li>当我们在谈跑步时，我们再谈什么</li></ul><h2 id="心理学相关"><a href="#心理学相关" class="headerlink" title="心理学相关"></a>心理学相关</h2><h3 id="得意忘形"><a href="#得意忘形" class="headerlink" title="得意忘形"></a>得意忘形</h3><blockquote><p>《得意忘形》是一个主张追求个体自由与探寻真理的媒体计划。带着对生命的有限性与无目的性的敬畏，我们试图为读者与听众提供更全面的觉察自我与认知世界的工具，以不断重建当下的方式穿越时间、抵达生活的本质。</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fs7k0rzwgoj303k03kglj.jpg" alt="得意忘形"></p><p><a href="http://www.lizhi.fm/rss/1959617.xml">rss</a></p><p>推荐：</p><ul><li>序言：「无为」与刻意、大脑的双系统、自由主义的危机与开篇絮语</li><li>网球：孤独和它所创造的</li></ul><h3 id="Blow-Your-Mind"><a href="#Blow-Your-Mind" class="headerlink" title="Blow Your Mind"></a>Blow Your Mind</h3><blockquote><p>两个人的公路播客。</p></blockquote><p> <a href="http://nj.lizhi.fm/rss/14774.xml">rss</a></p><h2 id="知识型"><a href="#知识型" class="headerlink" title="知识型"></a>知识型</h2><h3 id="狗熊有话说"><a href="#狗熊有话说" class="headerlink" title="狗熊有话说"></a>狗熊有话说</h3><blockquote><p>独立知识型播客</p></blockquote><p><a href="http://www.iclubkm.com/bearbigpodcast/feed/">rss</a></p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="UX-Coffee-设计咖"><a href="#UX-Coffee-设计咖" class="headerlink" title="UX Coffee 设计咖"></a>UX Coffee 设计咖</h3><blockquote><p>《UX Coffee 设计咖》是一档关于用户体验的播客节目。我们邀请来自硅谷和国内的学者和职人来聊聊「产品设计」、「用户体验」和「个人成长」。微信公众号: uxcoffee</p></blockquote><p> <a href="https://rss.simplecast.com/podcasts/1897/rss">rss</a></p><h3 id="太医来了"><a href="#太医来了" class="headerlink" title="太医来了"></a>太医来了</h3><blockquote><p>《太医来了》由 IPN 出品、由前骨科医生初洋和妇产科医生田吉顺主持，是中文互联网第一档医生谈话类播客。节目里没有老专家讲养生，只有几个医生聊聊医院里的事儿，顺便给大家做做科普。</p></blockquote><p> <a href="http://taiyilaile.com/rss">rss</a></p><h3 id="黑水公园"><a href="#黑水公园" class="headerlink" title="黑水公园"></a>黑水公园</h3><blockquote><p>《黑水公园》是一档在网络平台定期播出的广播节目，以轻松的对话形式向听众普及科幻电影知识，讲述电影真实故事，并且会定期分享各类优质的科幻作品。</p></blockquote><p>推荐：</p><ul><li>《宝石之国》恭喜你发现宝藏了！</li><li>《浩瀚苍穹》二百年后的太空战争</li><li>十分好看的《白日梦想家》</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;从大学时期听书开始，慢慢接触到更多的播客。听一些人讲故事，讲技术，感觉也是一个非常不错的了解世界的途径。已经成为我生活中的一部分。不过从身边感觉到播客还是比较小众的。于是想推荐一下我在听的一些播客吧。&lt;br&gt;引用一句《内核恐慌》的话作为推荐语：“我们虽然号称 Hacker ，但是也没有干货，想听的人就听，不想听的人就别听。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐播客客户端： Moon FM，播客，小宇宙，player.fm&lt;/p&gt;
&lt;h2 id=&quot;IT-技术主题&quot;&gt;&lt;a href=&quot;#IT-技术主题&quot; class=&quot;headerlink&quot; title=&quot;IT 技术主题&quot;&gt;&lt;/a&gt;IT 技术主题&lt;/h2&gt;&lt;h3 id=&quot;《内核恐慌》&quot;&gt;&lt;a href=&quot;#《内核恐慌》&quot; class=&quot;headerlink&quot; title=&quot;《内核恐慌》&quot;&gt;&lt;/a&gt;《内核恐慌》&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fpp7nosof8j3074074dfr.jpg&quot; alt=&quot;内核恐慌&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《内核恐慌》(Kernel Panic) 是吴涛和 Rio 做的播客，首播于 2014 年 10 月。号称硬核，可也没什么干货。想听的人听，不想听的人就别听。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kernelpanic.fm/feed&quot;&gt;rss&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型系统&lt;/li&gt;
&lt;li&gt;并发与异步&lt;/li&gt;
&lt;li&gt;数学与编程&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="播客" scheme="http://guowenfh.github.io/categories/%E6%92%AD%E5%AE%A2/"/>
    
    
    <category term="播客" scheme="http://guowenfh.github.io/tags/%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>学习 Promise，掌握未来世界 JS 异步编程基础</title>
    <link href="http://guowenfh.github.io/2018/06/04/2018/learning-Promise/"/>
    <id>http://guowenfh.github.io/2018/06/04/2018/learning-Promise/</id>
    <published>2018-06-03T16:15:37.000Z</published>
    <updated>2020-03-12T04:04:13.275Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实想写 Promise 的使用已经很长时间了。一个是在实际编码的过程中经常用到，一个是确实有时候小伙伴们在使用时也会遇到一些问题。<br>Promise 也确实是 ES6 中 对于写 JS 的方式，有着真正最大影响的 API 特性之一。<br>本文是实际使用使用过程中的一个总结<br>看一下文件创建时间 2017-10-09，拖延症真是太可怕了。。。还是得增强执行力啊！不忘初心，加油吧！</p></blockquote><h2 id="前言-amp-amp-基础概念"><a href="#前言-amp-amp-基础概念" class="headerlink" title="前言 &amp;&amp; 基础概念"></a>前言 &amp;&amp; 基础概念</h2><p>Promise 是解决 JS 异步的一种方案，相比传统的回调函数，Promise 能解决多个回调严重嵌套的问题。</p><p>Promise 对象代表一个异步操作，有三种状态: <code>pending、fulfilled 或 rejected</code> ，状态的转变只能是 <code>pending -&gt; fulfilled</code> 或者 <code>pending -&gt; rejected</code> ，且<strong>这个过程一旦发生就不可逆转</strong>。</p><span id="more"></span><blockquote><p>个人认为讲解 Promise 实际上需要分成两个部分</p><ol><li>对于 Promise 构造函数的使用说明。</li><li>Promise 原型对象上的一些方法。</li></ol></blockquote><h2 id="Promise-构造函数"><a href="#Promise-构造函数" class="headerlink" title="Promise 构造函数"></a>Promise 构造函数</h2><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。</p><p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject 。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve 函数的作用是将 Promise 对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled ），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br>reject 函数的作用是，将 Promise 对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected ），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>下面代码创造了一个 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* 异步操作成功 */</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 取消注释这里可以体现，Promise 的状态一旦变更就不会再变化的特性</span></span><br><span class="line">    <span class="comment">// reject(&#x27;error&#x27;);</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上述 <code>new Promise()</code> 之后，除去用 catch 去捕获错误之外，也可以用 <code>then</code> 方法指定 <code>resolve</code> 和 <code>reject</code> 的回调函数<br>也能达到捕获错误的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">request().then(</span><br><span class="line">  result =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(result);</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>原型上的方法</p><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a><code>Promise.prototype.then()</code></h3><blockquote><p>p.then(onFulfilled, onRejected);</p></blockquote><p>then 方法 是定义在 <code>Promise.prototype</code> 上的方法，如上面的例子一样，有两个参数，<code>fulfilled</code> 的回调函数和 <code>rejected</code> 的回调函数，第二个参数时可选的。</p><p>两个关键点：</p><ol><li>then 方法的返回值是一个新的 <code>Promise</code> 实例，所以对于调用者而言，拿到一个 <code>Promise</code> 对象，调用 <code>then</code> 后仍然返回一个 <code>Promise</code> ，而它的行为与 then 中的回调函数的返回值有关。如下：</li></ol><ul><li>如果 then 中的回调函数返回一个值，那么 then 返回的 Promise 将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。</li><li>如果 then 中的回调函数抛出一个错误，那么 then 返回的 Promise 将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</li><li>如果 then 中的回调函数返回一个已经是接受状态的 Promise，那么 then 返回的 Promise 也会成为接受状态，并且将那个 Promise 的接受状态的回调函数的参数值作为该被返回的 Promise 的接受状态回调函数的参数值。</li><li>如果 then 中的回调函数返回一个已经是拒绝状态的 Promise，那么 then 返回的 Promise 也会成为拒绝状态，并且将那个 Promise 的拒绝状态的回调函数的参数值作为该被返回的 Promise 的拒绝状态回调函数的参数值。</li><li>如果 then 中的回调函数返回一个未定状态（pending）的 Promise，那么 then 返回 Promise 的状态也是未定的，并且它的终态与那个 Promise 的终态相同；同时，它变为终态时调用的回调函数参数与那个 Promise 变为终态时的回调函数的参数是相同的。</li></ul><ol><li>链式调用。把嵌套回调的代码格式转换成一种链式调用的纵向模式。</li></ol><p>比如说回调形式: 一个回调地狱的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="function"><span class="params">a1</span> =&gt;</span> &#123;</span><br><span class="line">  b(a1, <span class="function"><span class="params">b1</span> =&gt;</span> &#123;</span><br><span class="line">    c(b1, <span class="function"><span class="params">c1</span> =&gt;</span> &#123;</span><br><span class="line">      d(c1, <span class="function"><span class="params">d1</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(d1);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样的横向扩展可以修改成(a,b,c,d)均为返回 Promise 的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a()</span><br><span class="line">  .then(b)</span><br><span class="line">  .then(c)</span><br><span class="line">  .then(d)</span><br><span class="line">  .then(<span class="function"><span class="params">d1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d1);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//===== 可能上面的例子并不太好看 ===下面这样更直观</span></span><br><span class="line">a()</span><br><span class="line">  .then(<span class="function"><span class="params">a1</span> =&gt;</span> b(a1))</span><br><span class="line">  .then(<span class="function"><span class="params">b1</span> =&gt;</span> c(b1))</span><br><span class="line">  .then(<span class="function"><span class="params">c1</span> =&gt;</span> d(c1))</span><br><span class="line">  .then(<span class="function"><span class="params">d1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d1);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>这样的纵向结构，看上去清爽多了。</p><h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a><code>Promise.prototype.catch()</code></h3><p>除了 <code>then()</code> ，在 <code>Promise.prototype</code> 原型链上的还有 <code>catch()</code> 方法，这个是拒绝的情况的处理函数。</p><p>其实 它的行为与调用 <code>Promise.prototype.then(undefined, onRejected)</code> 相同。 (事实上, calling <code>obj.catch(onRejected)</code> 内部 calls <code>obj.then(undefined, onRejected))</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line">request().then(</span><br><span class="line">  result =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(result);</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">request()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如上这个例子：两种方式在使用，与结果基本上是等价的，但是 仍然推荐第二种写法，下面我会给出原因:</p><ol><li>在 Promise 链中 <code>Promise.prototype.then(undefined, onRejected)</code>，<code>onRejected</code> 方法无法捕获当前 Promise 抛出的错误,而后续的 .catch 可以捕获之前的错误。</li><li>代码冗余</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(</span><br><span class="line">    result =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result + <span class="string">&quot;1&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(result + <span class="string">&quot;1&quot;</span>); <span class="comment">// 抛出一个错误</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error + <span class="string">&quot;:1&quot;</span>); <span class="comment">// 不会走到这里</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(</span><br><span class="line">    result =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result + <span class="string">&quot;2&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(result + <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error + <span class="string">&quot;:2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// reject1, Error: reject1:2</span></span><br></pre></td></tr></table></figure><p>如果使用 <code>.catch</code> 方法，代码会简化很多，<strong>这样实际上是延长了 Promise 链</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result + <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(result + <span class="string">&quot;1&quot;</span>); <span class="comment">// 抛出一个错误</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result + <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(result + <span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// reject1, Error: reject1:2</span></span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a><code>Promise.prototype.finally()</code></h3><p><strong>暂未完全成为标准的一部分，处于：Stage 4</strong></p><p><code>finally()</code> 方法返回一个 <code>Promise</code>，在执行 <code>then()</code> 和 <code>catch()</code> 后，都会执行<code>finally</code>指定的回调函数。（回调函数中无参数，仅仅代表 Promise 的已经结束</p><p>等同于使用 <code>.then</code> + <code>.catch</code> 延长了原有的 Promise 链的效果，避免同样的语句需要在 <code>then()</code> 和 <code>catch()</code> 中各写一次的情况。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally">mdn-Promise-finally</a></p><h2 id="Promise-对象上的方法"><a href="#Promise-对象上的方法" class="headerlink" title="Promise 对象上的方法"></a>Promise 对象上的方法</h2><h3 id="Promise-all-用来处理-Promise-的并发"><a href="#Promise-all-用来处理-Promise-的并发" class="headerlink" title="Promise.all() 用来处理 Promise 的并发"></a><code>Promise.all()</code> 用来处理 Promise 的并发</h3><p><code>Promise.all</code> 会将多个 <code>Promise</code> 实例封装成一个新的 <code>Promise</code> 实例，新的 promise 的状态取决于多个 <code>Promise</code> 实例的状态，只有在全体 <code>Promise</code> 都为 <code>fulfilled</code> 的情况下，新的实例才会变成 <code>fulfilled</code> 状态。；如果参数中 <code>Promise</code> 有一个失败（<code>rejected</code>），此实例回调失败（<code>rejecte</code>），失败原因的是第一个失败 <code>Promise</code> 的结果。</p><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="string">&quot;p1&quot;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&quot;p2&quot;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;p3&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;then&quot;</span>, result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;catch&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// [p1,p2,p3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="string">&quot;p1&quot;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&quot;p2&quot;</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="built_in">Promise</span>.reject(<span class="string">&quot;p3 error&quot;</span>)</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;then&quot;</span>, result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;catch&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// p3 error</span></span><br></pre></td></tr></table></figure><p>获取 cnode 社区的 精华贴的前十条内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;https://cnodejs.org/api/v1/topics?tab=good&amp;limit=10&quot;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchList = res.data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fetch(<span class="string">`https://cnodejs.org/api/v1/topic/<span class="subst">$&#123;item.id&#125;</span>`</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">Promise</span>.all(fetchList).then(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(list);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-race-竞态执行"><a href="#Promise-race-竞态执行" class="headerlink" title="Promise.race() 竞态执行"></a><code>Promise.race()</code> 竞态执行</h3><p><code>Promise.race</code> 也会将多个 <code>Promise</code> 实例封装成一个新的<code>Promise</code>实例，只不过新的 <code>Promise</code> 的状态取决于最先改变状态的 <code>Promise</code> 实例的状态。</p><p>在前端最典型的一个用法是为 fetch api 模拟请求超时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">  fetch(<span class="string">&quot;https://cnodejs.org/api/v1/topics?tab=good&amp;limit=10&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span></span><br><span class="line">    res.json()</span><br><span class="line">  ),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(reject, <span class="number">1</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;then&quot;</span>, result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;catch&quot;</span>, error); <span class="comment">// 进入这里</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上述例子中只要请求 未在 1 毫秒内结束就会进入 <code>.catch()</code> 方法中，虽然不能将请求取消，但是超时模拟却成功了</p><h3 id="Promise-resolve-value-amp-amp-Promise-reject-reason"><a href="#Promise-resolve-value-amp-amp-Promise-reject-reason" class="headerlink" title="Promise.resolve(value) &amp;&amp; Promise.reject(reason)"></a><code>Promise.resolve(value)</code> &amp;&amp; <code>Promise.reject(reason)</code></h3><p>这两个方法都能用来创建并返回一个新的 Promise , 区别是 <code>Promise.resolve(value)</code> 携带进新的 Promise 状态是 <code>fulfilled</code>。而 <code>Promise.reject(reason)</code> 带来的 <code>rejected</code></p><p>有的时候可以用来简化一些创建 Promise 的操作如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">time = <span class="number">0</span></span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line"><span class="comment">// 这里创建一个 睡眠，并且打印的链</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> sleep(<span class="number">1000</span>))</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> sleep(<span class="number">2000</span>))</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>有时也用来 手动改变 Promise 链中的返回状态 ，当然这样实际上和 直接返回一个值，或者是 使用 throw Error 来构造一个错误，并无区别。到底要怎么用 就看个人喜好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;resolve&quot;</span>); <span class="comment">// 1.</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&quot;reject1&quot;</span>); <span class="comment">// 2.</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(</span><br><span class="line">    result =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(result + <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(err); <span class="comment">// 3.</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// 4.</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err + <span class="string">&quot;err&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// reject1</span></span><br></pre></td></tr></table></figure><h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><p>下面来看几个例子:</p><p>关于执行顺序，具体可搜索，js 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;step 1&quot;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;step 2&quot;</span>);</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;step 3&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;step 4&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// step 1, step 2, step 4 , step 3</span></span><br></pre></td></tr></table></figure><p>在使用 Promise 构造函数构造 一个 Promise 时，回调函数中的内容就会立即执行，而 <code>Promise.then</code> 中的函数是异步执行的。</p><p>关于状态不可变更</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;once&quot;</span>);</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res, <span class="built_in">Date</span>.now() - start);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res, <span class="built_in">Date</span>.now() - start);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res, <span class="built_in">Date</span>.now() - start);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code> 构造函数只执行一次，内部状态一旦改变，有了一个值，后续不论调用多少次<code>then()</code>都只拿到那么一个结果。</p><p>关于好像状态可以变更</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = p1.then(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p1&quot;</span>, p1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p2&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;p1&quot;</span>, p1);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;p2&quot;</span>, p2);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>观察这一次的打印<br>第一次打印出两个 <code>Promise</code> 的时候都是 <code>pending</code> ，因为 p2 是基于 p1 的结果，p1 正在 pending ，立即打印出的时候肯定是 pending ;第二次打印的时候，因为 p1 的状态为 resolved ，p2 为 rejected ，这个并不是已经为 fulfilled 状态改变为 rejected ，而是 p2 是一个新的 Promise 实例，<code>then()</code> 返回新的 Promise 实例。</p><p>关于透传</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">11</span>)</span><br><span class="line">  .then(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="number">2</span>)</span><br><span class="line">  .then(<span class="number">3</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">&quot;res&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//   11</span></span><br></pre></td></tr></table></figure><p>给 then 方法传递了一个非函数的值，等同于 <code>then(null)</code>，会导致穿透的效果，就是直接过掉了这个 then() ，直到符合规范的 then() 为止。</p><h2 id="Promise-的串行调用"><a href="#Promise-的串行调用" class="headerlink" title="Promise 的串行调用"></a>Promise 的串行调用</h2><p>使用 Array.reduce 方法串行执行 Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">time = <span class="number">0</span></span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line">[<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>, <span class="number">4000</span>].reduce(<span class="function">(<span class="params"><span class="built_in">Promise</span>, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> sleep(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve());</span><br><span class="line"><span class="comment">// 在分别的等待时间后输出 1，2，3，4</span></span><br></pre></td></tr></table></figure><p>这篇文章到这里就基本上结束了，相信 如果能理解上面的内容，并且在实际项目中使用的话。应该会让工作更高效吧，对于新的异步使用应该也会更加的得心应手。Promise 的使用相对简单，可能后续再出一篇如何实现一个 Promise 吧</p><p>那些收集的 Promise 的优质文章。</p><ul><li><a href="http://bluebirdjs.com/docs/getting-started.html"> bluebird 是一个拓展 Promise 方法的库，提供了非常多的实用的方法，推荐</a></li><li><a href="https://zhuanlan.zhihu.com/p/25266255">[思维导图] Promise - 《你不知道的 JavaScript》- 中卷 - 第二部分</a></li><li><a href="https://zhuanlan.zhihu.com/p/37535594">[译] 一个简单的 ES6 Promise 指南</a></li><li><a href="http://es6.ruanyifeng.com/#docs/promise">阮一峰-ES6 入门 Promise 对象</a></li><li><a href="https://juejin.im/post/5abfdfb5f265da237a4d2708">Promise 不够中立</a></li><li><a href="https://zhuanlan.zhihu.com/p/35082528">WHY “PROMISES ARE NOT NEUTRAL ENOUGH” IS NOT NEUTRAL ENOUGH</a></li><li><a href="https://zhuanlan.zhihu.com/p/34093535">【译】关于 Promise 的 9 个提示</a></li><li><a href="https://zhuanlan.zhihu.com/p/30797777">Promise 必知必会（十道题）</a></li><li><a href="https://www.inoreader.com/article/3a9c6e7ec0b4336e-event-loop">Event Loop 必知必会（六道题）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;其实想写 Promise 的使用已经很长时间了。一个是在实际编码的过程中经常用到，一个是确实有时候小伙伴们在使用时也会遇到一些问题。&lt;br&gt;Promise 也确实是 ES6 中 对于写 JS 的方式，有着真正最大影响的 API 特性之一。&lt;br&gt;本文是实际使用使用过程中的一个总结&lt;br&gt;看一下文件创建时间 2017-10-09，拖延症真是太可怕了。。。还是得增强执行力啊！不忘初心，加油吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言-amp-amp-基础概念&quot;&gt;&lt;a href=&quot;#前言-amp-amp-基础概念&quot; class=&quot;headerlink&quot; title=&quot;前言 &amp;amp;&amp;amp; 基础概念&quot;&gt;&lt;/a&gt;前言 &amp;amp;&amp;amp; 基础概念&lt;/h2&gt;&lt;p&gt;Promise 是解决 JS 异步的一种方案，相比传统的回调函数，Promise 能解决多个回调严重嵌套的问题。&lt;/p&gt;
&lt;p&gt;Promise 对象代表一个异步操作，有三种状态: &lt;code&gt;pending、fulfilled 或 rejected&lt;/code&gt; ，状态的转变只能是 &lt;code&gt;pending -&amp;gt; fulfilled&lt;/code&gt; 或者 &lt;code&gt;pending -&amp;gt; rejected&lt;/code&gt; ，且&lt;strong&gt;这个过程一旦发生就不可逆转&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    <category term="异步编程" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
    <category term="异步编程" scheme="http://guowenfh.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Promise" scheme="http://guowenfh.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>2017 杭州 nodeParty 记录</title>
    <link href="http://guowenfh.github.io/2018/03/11/2018/2017-hangzhou-node-party/"/>
    <id>http://guowenfh.github.io/2018/03/11/2018/2017-hangzhou-node-party/</id>
    <published>2018-03-11T14:28:16.000Z</published>
    <updated>2020-03-12T04:04:13.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录于 2017 杭州 丁香园 nodeParty 期间，由于是流水帐式记录，一直都偷懒没发。最近心态又有点改变，抽了一点时间来发布。</p></blockquote><hr><blockquote><p>最近在工作中的任务对于 node 的任务越来越重了，正好看到新一期的 Node Party 开办了，于是当天就报名了，想看看大家 是怎么在用 Node.js 的。<br>好了，废话不多说，我来从时间顺序来聊一下我参加这次会议听到的东西</p></blockquote><span id="more"></span><p>首先是开场，我在一开始的时候，坐在最后一排，然后就听到 贺老和负责人在聊：<br>贺老说不需要准备 ppt，直接现场写代码。<br>结果说到我们今天有直播，不能用自己的电脑。<br>贺老就说不能总是这样啊。。本来现场写代码压力就大，还不用自己电脑，压力就更大了。<br>于是我果断搭话，说贺老你指的是在 360 分享 用 TS 写 benchmark 工具的那次么。<br>贺老笑了笑说是的。<br>没再多说，之后就是正式的分享了。</p><h2 id="第一个主题：《通过-GraphQL-向-RN-透出实时报表》"><a href="#第一个主题：《通过-GraphQL-向-RN-透出实时报表》" class="headerlink" title="第一个主题：《通过 GraphQL 向 RN 透出实时报表》"></a>第一个主题：《通过 GraphQL 向 RN 透出实时报表》</h2><p>这个话题一开始在介绍了宋小菜的业务场景，提出了这样的场景下对于报表的各式需求，然后如何去进行考量技术选型。以及在选定了 GraphQL 之后，是怎么样一步一步的去改造，去利用到其中的特性，和一些配套的解决方案，去解决实际问题吧。虽然有提 RN ，但是实际上基本上没这部分的内容。</p><p>GraphQL 在很早之前听过，在听完之后只能说是多了一些了解吧，如果没有真正对应的需求，可能也不会再去了解更多也说不定。只是知道了一样一种解决方案。</p><h2 id="第二个主题：《Node-js多线程实践》"><a href="#第二个主题：《Node-js多线程实践》" class="headerlink" title="第二个主题：《Node.js多线程实践》"></a>第二个主题：《Node.js多线程实践》</h2><p>这个话题听不明白，我基本上对于操作系统以及线程进程是没有理解或者说太多的概念的。</p><p>主要是说他写了一个 <a href="https://github.com/Rokid/node-webworker">node-webworker</a> 的库，以及能解决一些什么问题</p><h2 id="第三个主题：《STC-vs-PTC》"><a href="#第三个主题：《STC-vs-PTC》" class="headerlink" title="第三个主题：《STC vs PTC》"></a>第三个主题：《STC vs PTC》</h2><p>经过中场休息，贺老上台，感觉大家确实都变得有精神了很多。贺老这次没现场写代码了， 讲了 对于 js 中 尾递归优化的实现时，T39 不同厂商之间产生的分歧，以及两种实现上各自的问题。整个演讲非常流程，也很生动。这个话题的话，贺老应该很久之前在某一个会议上讲过，好像是 Qcon？忘记了，我只看了 PPT。<br>这个话题，主要还是介绍一些 T39 八卦吧，以及如何去演讲表达自己。</p><p>##《Node.js在一家大数据服务创业公司的应用实践》</p><p>这里首先讲了 关于一个内部样板项目的生成器。也就是大家说的 cli 工具。然后讲到了 nodejs 的项目管理，主要是 pm2 出除去命令行之外，直接用他暴露的 api 在 js 文件里面的使用吧，这样会更加方便于管理应用的生命周期。</p><p>这里的内容，很多都是在真正业务实践中会遇到的问题吧，只可惜目前我对于 node 要做的事情还很少，所以理解不深，因为现在我们这里就是 ssh 到服务器上 pm2 restart 的。。-_-</p><p>##《妹子程序员的自我修养》</p><p>到了天哥的话题，这里主要说了一些社会上对于妹子程序员的一些刻板印象。虽然有很多也是事实，因为社会对于程序员也有刻板印象嘛。不过庆幸的是，我身边基本上还都没有这样的情况发生。<br>然后提问题的时候，也有很多的同学在问个人成长相关的事情，主要是应对 学习新知识的学习焦虑吧，天哥说到一定要喜欢技术才能真正的钻研到里面去。不然的话还是可以考虑比重的，比如偏管理方向多一点。<br>当然这里也提到一个问题，就是当我们自己去学习一个技术的时候，可能一个星期都没学会，但如果公司有一个具体的需求，需要用到这个技术，可能2天就搞定了。这个其实值得大家都思考一下。带着明确的目标（足够细化，足够可以被量化）去学习东西的感觉是真的不一样的。所以就算你对于技术的热情没有那么高，但是你一定需要让自己的某一个目标，去驱动自己学习</p><h2 id="最后的是圆桌话题-《技术变现》"><a href="#最后的是圆桌话题-《技术变现》" class="headerlink" title="最后的是圆桌话题 《技术变现》"></a>最后的是圆桌话题 《技术变现》</h2><p>这个环节，主要就是听听大家聊天，然后说一些经验之谈吧。<br>里面提到了 知乎 Live 是收智商税，嘿嘿，然后贺老有解释说，其实他还是花了很多时间去准备的，里面也确实是真实案例还是很多干货的，赚钱是机缘巧合的事情。</p><p>其实对于这个问题真是这样，大家也别太在意说买 live 是被收智商税什么的，其实只要对于你真实有用就可以了。不需要太多的去考虑别人怎么说,能带来价值的就是有用。<br>然后有说道做外包相关的事情，其实我在大学的时候也做过外包那个时候学习前端才几个月吧然后和一个后端的小伙伴两个人一直使用QQ语音聊天沟通，算是远程工作吧两个月下来一个人到时候有个几千块块钱吧，其实我觉得这个，对于我当时的一个学生来说已经很不错了。所以我觉得学生时候是完全可以去接接外包去尝试一下，知道具体开发程序是什么样子。工作之后的话，就还需要权衡了。</p><hr><p>后来就基本在和之前的主管聊天了，也是这次最大的收获，我们聊了互相工作的一些转变，然后也对于个人成长做了一些讨论。受益良多。</p><p>最后总结一个点吧。</p><p>还是需要多沟通，有了信息之后才能更好的去做一个决定，和完成好一件事情</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文记录于 2017 杭州 丁香园 nodeParty 期间，由于是流水帐式记录，一直都偷懒没发。最近心态又有点改变，抽了一点时间来发布。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在工作中的任务对于 node 的任务越来越重了，正好看到新一期的 Node Party 开办了，于是当天就报名了，想看看大家 是怎么在用 Node.js 的。&lt;br&gt;好了，废话不多说，我来从时间顺序来聊一下我参加这次会议听到的东西&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="活动" scheme="http://guowenfh.github.io/categories/%E6%B4%BB%E5%8A%A8/"/>
    
    
    <category term="社区" scheme="http://guowenfh.github.io/tags/%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>一次canvas中文字转化成图片后清晰度丢失的探索</title>
    <link href="http://guowenfh.github.io/2018/03/05/2018/canvas-text-to-image-clarity/"/>
    <id>http://guowenfh.github.io/2018/03/05/2018/canvas-text-to-image-clarity/</id>
    <published>2018-03-05T14:56:53.000Z</published>
    <updated>2020-03-12T04:04:13.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文最初记录在 2017 年 D2 期间。知乎问题为：参加第12届D2前端技术论坛，你有什么收获？<br>主要是想说一下百度的小姐姐分享的话题 《打造前端复杂应》。</p></blockquote><p>最近正好接手了这样一个类似的项目，（百度 h5 百度脑图）不过整体全是基于 canvas 的，而且也没有事件广播，没有数据驱动，没有模型，全是直接 jquery 直接操作 DOM 的。整体感觉很混乱。现在一个人维护，改起来，感觉很忧伤。</p><p>不过听完分享之后，不管是事件广播，还是直接数据的双向绑定，都让我多了很多思路去改造。目前第一步就是先加入了 webpack、ES6、React、PubSub ，先把之前的 jquery 逐渐干掉吧。</p><hr><p>不过小姐姐提到百度脑图 和 百度 H5 分别使用 SVG 以及 原生 DOM 来实现的，这样当然没什么问题，不过也提到为什么没用 canvas 的原因，主要是 事件绑定，元素选择相关的等等一些方面的考虑。</p><p>但是实际上，根据我项目的使用来说，直接使用 canvas 也是可以的，基本能解决掉提出来的顾虑，当然主要是有这个强大的开源 canvas 操作库：</p><p><a href="http://fabricjs.com/">fabric.js: Javascript Canvas Library, SVG-to-Canvas (&amp; canvas-to-SVG) Parser </a></p><p>事件，动画，选中，变换，loadJOSN()，toJSON() 。强大之处，不太好用几句话说清楚，部分功能如下图，建议官网体验:</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fp2cew4ofqj30uw0uu0xs.jpg"></p><span id="more"></span><hr><p>上面一堆都是废话。</p><p>下面是想要说的一个问题，本来想在现场提出来的，但是没被点名到。不过有一个小哥提到了百度 H5 在导出图片的清晰度的问题，说截图都比导出的图片清晰，然后每次做完都只能手动截图。。<br>我遇到的也类似。不过，经过排除主要聚焦在字体。（其实我觉得那个小哥，也应该是图片中的字体不够清晰）</p><p>在将 dom / canvas 生成图片时，都会发现其中的文本在不同系统平台下有着非常大的清晰度差异（和所选的字体也有一定相关）。（说到字体，就会谈到中文字体的子集化，和 WebFont 动态生成这个也很有意思。推荐一个开源库<a href="https://github.com/purplebamboo/font-carrier">font-carrier:很久没更新了,依赖被写死，需慎重。 </a> 这里不谈）</p><p>下图有四种图片生成方式： 本地 qq 截图；psd 导出； mac phantomjs 网页截图 ； CentOS phantomjs 网页截图。（未按顺序，清晰度各有不同，最底部是一行是图片），查看大图。。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fp2cddd5wmj31ii0niws0.jpg"></p><p>相信可以很清楚的看出来其中存在的巨大差异。。。</p><p>。。。。在排除 phantomjs 配置问题，已经字体是否生效的问题。。（也试了在 window 下使用 phantomjs 网页截图 效果更差。）</p><p>最后在我这里给出的结论就是生成图片的清晰度主要受两方面影响（其实浏览器也一样？）：</p><p><strong>1. 不同的操作系统底层对于字体的渲染原理和方式差异。</strong><br><strong>2. 字体原本选用的字体生成类型 TrueType / OpenType 等特性差异</strong></p><p>然后问题暂时在我这到此为止了。以上两个问题，我目前的能力都还解决不了。。。<br>欢迎打脸。。。也欢迎有类似问题的一起聊聊</p><hr><p>2018-03-05 记录 上面清晰度的问题已经解决。</p><ol><li>同时购入  <strong>mac server</strong> 与 <strong>windows server</strong> 用于图片生成。 （ mac 的文字显示效果与 mac 电脑的一致。（相对于 windows 来说 加黑加粗了</li><li>弃用了 phantomjs 改用 google 出品的 Puppeteer。</li><li>截图选项使用 png （即使是 quality 100 的 jpg 仍旧渲染会有问题。如果 png 文件过大， 再使用 imagemagick / GraphicsMagick 进行压缩。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文最初记录在 2017 年 D2 期间。知乎问题为：参加第12届D2前端技术论坛，你有什么收获？&lt;br&gt;主要是想说一下百度的小姐姐分享的话题 《打造前端复杂应》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近正好接手了这样一个类似的项目，（百度 h5 百度脑图）不过整体全是基于 canvas 的，而且也没有事件广播，没有数据驱动，没有模型，全是直接 jquery 直接操作 DOM 的。整体感觉很混乱。现在一个人维护，改起来，感觉很忧伤。&lt;/p&gt;
&lt;p&gt;不过听完分享之后，不管是事件广播，还是直接数据的双向绑定，都让我多了很多思路去改造。目前第一步就是先加入了 webpack、ES6、React、PubSub ，先把之前的 jquery 逐渐干掉吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不过小姐姐提到百度脑图 和 百度 H5 分别使用 SVG 以及 原生 DOM 来实现的，这样当然没什么问题，不过也提到为什么没用 canvas 的原因，主要是 事件绑定，元素选择相关的等等一些方面的考虑。&lt;/p&gt;
&lt;p&gt;但是实际上，根据我项目的使用来说，直接使用 canvas 也是可以的，基本能解决掉提出来的顾虑，当然主要是有这个强大的开源 canvas 操作库：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fabricjs.com/&quot;&gt;fabric.js: Javascript Canvas Library, SVG-to-Canvas (&amp;amp; canvas-to-SVG) Parser &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;事件，动画，选中，变换，loadJOSN()，toJSON() 。强大之处，不太好用几句话说清楚，部分功能如下图，建议官网体验:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fp2cew4ofqj30uw0uu0xs.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="canvas" scheme="http://guowenfh.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>从零学习 canvas (一)</title>
    <link href="http://guowenfh.github.io/2017/10/24/2017/learn-canvas-01/"/>
    <id>http://guowenfh.github.io/2017/10/24/2017/learn-canvas-01/</id>
    <published>2017-10-24T15:10:49.000Z</published>
    <updated>2020-03-12T04:04:13.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于上一篇描述的原因。有图像处理的需求，于是我就开始学习 canvas 啦，和以前的一样，这一篇也是一边学一边写，敲出来的。有不正确的地方，欢迎指出。<br>canvas 本身的 api 描述是比较简单，但是衍生出来的东西，操作，图像处理，动画，性能，还是非常的多的。所以对于 canvas 的学习不出意外的话，将会是一个系列。这就是第一篇了。下面就开始吧</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:blue;&quot;</span>&gt;</span>浏览器不支持canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不支持 canvas 的浏览器中，显示标签中的内容。<br>绘图区域 默认是 300 x 150。<br>canvas 中的宽高是实际的宽高，css 中的宽高会等比缩放。<br>在开始绘图之前需要先，获取绘图环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(canvas.getContext)&#123;</span><br><span class="line">    <span class="keyword">const</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="comment">// .... 绘制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="绘制方块"><a href="#绘制方块" class="headerlink" title="绘制方块"></a><strong>绘制方块</strong></h3><ul><li><code>fillRect(x, y, width, height)</code>：绘制矩形，默认黑色</li><li><code>strokeRect(x, y, width, height)</code>：带边框的矩形，默认黑色，默认 1px 。但是显示出来可能有区别</li><li><code>clearRect(x, y, width, height)</code><br>清除指定矩形区域，让清除部分完全透明。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 边框实际上被加粗了</span></span><br><span class="line">context.strokeRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">// 正常边框 1px</span></span><br><span class="line">context.strokeRect(<span class="number">160.5</span>,<span class="number">160.5</span>,<span class="number">50</span>,<span class="number">50</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置绘图样式"><a href="#设置绘图样式" class="headerlink" title="设置绘图样式"></a><strong>设置绘图样式</strong></h3><ul><li><code>fillStyle = color</code>: 填充颜色（绘制 canvas 是有顺序的）</li><li><code>lineWidth = value</code>:  线宽度，是一个数值</li><li><code>strokeStyle = color</code>:边线颜色</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">context.strokeStyle=<span class="string">&#x27;rgba(0,0,255,0.5)&#x27;</span>;</span><br><span class="line">context.lineWidth=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 调整 fillRect／ strokeRect 的顺序将有不一样的表现</span></span><br><span class="line">context.strokeRect(<span class="number">160.5</span>,<span class="number">160.5</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">context.fillRect(<span class="number">160.5</span>,<span class="number">160.5</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="边界绘制"><a href="#边界绘制" class="headerlink" title="边界绘制"></a><strong>边界绘制</strong></h3><ul><li><code>lineJoin = type</code>:边界连接点样式<ul><li>miter/默认;round/圆角;bevel/斜角</li></ul></li><li><code>lineCaP = type</code>:端点样式<ul><li>butt/默认;round/圆角;square/高度多出未为宽一半的值</li></ul></li></ul><h3 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a><strong>绘制路径</strong></h3><ul><li><code>beginPath()</code>:开始绘制路径</li><li><code>closePath()</code>:结束绘制路径（,不是必需的）</li><li><code>moveTo(x,y)</code>:移动到绘制的点，坐标x以及y</li><li><code>lineTo(x,y)</code>:绘制一条从当前位置到指定x以及y位置的直线。</li><li><code>fill()</code>: 填充</li><li><code>stroke()</code>: 边框</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">context.lineTo(<span class="number">150</span>,<span class="number">100</span>);</span><br><span class="line">context.lineTo(<span class="number">100</span>,<span class="number">150</span>);</span><br><span class="line">context.closePath();</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line">context.fill();</span><br><span class="line"><span class="comment">// 边框</span></span><br><span class="line">context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制弧"><a href="#绘制弧" class="headerlink" title="绘制弧"></a><strong>绘制弧</strong></h3><ul><li><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>:绘制圆<ul><li>x,y 起始坐标点，radius 半径大小。</li><li>startAngle ，endAngle。 圆弧的起始与结束，x轴方向开始计算，单位以弧度表示。弧度 = 角度 * Math.PI/180</li><li>anticlockwise 可选的Boolean值 ，如果为 true，逆时针绘制圆弧，反之，顺时针绘制。</li></ul></li><li><code>arcTo(x1, y1, x2, y2, radius)</code>:根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点.(不建议使用。)</li><li><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>:绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</li><li><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code><br>绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">context.moveTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">context.arc(<span class="number">200</span>,<span class="number">200</span>,<span class="number">150</span>,<span class="number">0</span>,<span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// context.closePath();</span></span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.moveTo(<span class="number">100</span>,<span class="number">150</span>);</span><br><span class="line">context.arcTo(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 贝塞尔曲线</span></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">75</span>,<span class="number">25</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">62.5</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">25</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">50</span>,<span class="number">120</span>,<span class="number">30</span>,<span class="number">125</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">60</span>,<span class="number">120</span>,<span class="number">65</span>,<span class="number">100</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">125</span>,<span class="number">100</span>,<span class="number">125</span>,<span class="number">62.5</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">125</span>,<span class="number">25</span>,<span class="number">75</span>,<span class="number">25</span>);</span><br><span class="line">context.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态的保存与恢复"><a href="#状态的保存与恢复" class="headerlink" title="状态的保存与恢复"></a><strong>状态的保存与恢复</strong></h3><ul><li><code>save()</code>:保存路径</li><li><code>restore()</code>:恢复路径</li></ul><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a><strong>变换</strong></h3><ul><li><code>translate(x, y)</code>:偏移。x 是左右偏移量，y 是上下偏移量，如右图所示。</li><li><code>rotate(angle)</code>: 旋转。旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。</li><li><code>scale(x, y)</code> :缩放。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。</li><li><code>transform(m11, m12, m21, m22, dx, dy)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.translate(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">context.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">30</span>);</span><br><span class="line">context.scale(<span class="number">1.6</span>,<span class="number">1</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fktr36cym6j30l40c0t8y.jpg" alt="画板"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML=<span class="string">&#x27;&lt;canvas id=&quot;canvas&quot; width=&quot;1000&quot; height=&quot;1000&quot;&gt;浏览器不支持&lt;/canvas&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> left = ev.clientX - canvas.offsetLeft;</span><br><span class="line">        <span class="keyword">const</span> top = ev.clientY - canvas.offsetTop;</span><br><span class="line">        context.lineTo(left,top);</span><br><span class="line">        context.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>,<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> left = ev.clientX - canvas.offsetLeft;</span><br><span class="line">        <span class="keyword">const</span> top = ev.clientY - canvas.offsetTop;</span><br><span class="line">        context.moveTo(left,top);</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>,move);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>,move);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="旋转的小方块"><a href="#旋转的小方块" class="headerlink" title="旋转的小方块"></a>旋转的小方块</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fktr2ctu8tj30kw0f8jrk.jpg" alt="旋转的小方块"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML=<span class="string">&#x27;&lt;canvas id=&quot;canvas&quot; width=&quot;1000&quot; height=&quot;1000&quot;&gt;浏览器不支持&lt;/canvas&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// context.moveTo(200,200);</span></span><br><span class="line">    context.translate(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        context.save();</span><br><span class="line">        context.fillStyle=<span class="string">&quot;#fff&quot;</span>;</span><br><span class="line">        context.fillRect(-<span class="number">200</span>, -<span class="number">200</span>, canvas.width, canvas.height);</span><br><span class="line">        <span class="keyword">if</span>(num2===<span class="number">100</span>)&#123;</span><br><span class="line">            value = -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num2===<span class="number">0</span>)&#123;</span><br><span class="line">            value = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num2 += value;</span><br><span class="line">        context.scale(num2 / <span class="number">50</span>,num2 / <span class="number">50</span>);</span><br><span class="line">        context.rotate(num * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line">        context.translate(-<span class="number">50</span>,-<span class="number">50</span>);</span><br><span class="line">        context.fillStyle=<span class="string">&quot;#000&quot;</span>;</span><br><span class="line">        context.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        context.restore();</span><br><span class="line">        requestAnimationFrame(start);</span><br><span class="line">    &#125;</span><br><span class="line">    start();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fktr3jexbaj30ou0kk3z8.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML=<span class="string">&#x27;&lt;canvas id=&quot;canvas&quot; width=&quot;1000&quot; height=&quot;1000&quot;&gt;浏览器不支持&lt;/canvas&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas.getContext) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">let</span> y = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="number">150</span>;</span><br><span class="line">        <span class="comment">// 绘制秒的刻度</span></span><br><span class="line">        context.lineWidth = <span class="number">1</span>;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        <span class="built_in">Array</span>(<span class="number">60</span>).fill(<span class="number">0</span>).forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            context.moveTo(x, y);</span><br><span class="line">            context.arc(x,y,r,<span class="number">6</span> * index * <span class="built_in">Math</span>.PI / <span class="number">180</span>,<span class="number">6</span> * (index + <span class="number">1</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.stroke();</span><br><span class="line">        <span class="comment">// 清空中间的部分</span></span><br><span class="line">        context.fillStyle = <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(x, y);</span><br><span class="line">        context.arc(x, y, r * <span class="number">20</span> / <span class="number">21</span>, <span class="number">0</span>, <span class="number">360</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>, <span class="literal">false</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制分钟刻度</span></span><br><span class="line">        context.lineWidth = <span class="number">2</span>;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        <span class="built_in">Array</span>(<span class="number">12</span>).fill(<span class="number">0</span>).forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            context.moveTo(x, y);</span><br><span class="line">            context.arc(x,y,r,<span class="number">30</span> * index * <span class="built_in">Math</span>.PI / <span class="number">180</span>,<span class="number">30</span> * (index + <span class="number">1</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.stroke();</span><br><span class="line"></span><br><span class="line">        context.fillStyle = <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(x, y);</span><br><span class="line">        context.arc(x, y, r * <span class="number">19</span> / <span class="number">21</span>, <span class="number">0</span>, <span class="number">360</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>, <span class="literal">false</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算时针，分针，秒针的旋转角度</span></span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> hour = date.getHours();</span><br><span class="line">        <span class="keyword">var</span> minute = date.getMinutes();</span><br><span class="line">        <span class="keyword">var</span> second = date.getSeconds();</span><br><span class="line">        <span class="keyword">var</span> hourValue = (-<span class="number">90</span> + hour * <span class="number">30</span> + minute / <span class="number">2</span> + second / <span class="number">60</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">        <span class="keyword">var</span> minuteValue = (-<span class="number">90</span> + minute * <span class="number">6</span> + second / <span class="number">12</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">        <span class="keyword">var</span> secondValue = (-<span class="number">90</span> + second * <span class="number">6</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小时</span></span><br><span class="line">        context.lineWidth = <span class="number">4</span>;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(x, y);</span><br><span class="line">        context.arc(x, y, r * <span class="number">8</span> / <span class="number">21</span>, hourValue, hourValue, <span class="literal">false</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.stroke();</span><br><span class="line">        <span class="comment">// 分</span></span><br><span class="line">        context.lineWidth = <span class="number">2</span>;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(x, y);</span><br><span class="line">        context.arc(x, y, r * <span class="number">15</span> / <span class="number">21</span>, minuteValue, minuteValue, <span class="literal">false</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.stroke();</span><br><span class="line">        <span class="comment">// 秒</span></span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(x, y);</span><br><span class="line">        context.arc(x, y, r * <span class="number">18</span> / <span class="number">21</span>, secondValue, secondValue, <span class="literal">false</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">        context.stroke();</span><br><span class="line">        <span class="comment">// 重新开始</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(time, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    time();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于上一篇描述的原因。有图像处理的需求，于是我就开始学习 canvas 啦，和以前的一样，这一篇也是一边学一边写，敲出来的。有不正确的地方，欢迎指出。&lt;br&gt;canvas 本身的 api 描述是比较简单，但是衍生出来的东西，操作，图像处理，动画，性能，还是非常的多的。所以对于 canvas 的学习不出意外的话，将会是一个系列。这就是第一篇了。下面就开始吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;background:blue;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;浏览器不支持canvas&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在不支持 canvas 的浏览器中，显示标签中的内容。&lt;br&gt;绘图区域 默认是 300 x 150。&lt;br&gt;canvas 中的宽高是实际的宽高，css 中的宽高会等比缩放。&lt;br&gt;在开始绘图之前需要先，获取绘图环境。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&amp;#x27;#canvas&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(canvas.getContext)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; context = canvas.getContext(&lt;span class=&quot;string&quot;&gt;&amp;#x27;2d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// .... 绘制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="canvas" scheme="http://guowenfh.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 electron 中的 session 管理（隔离）</title>
    <link href="http://guowenfh.github.io/2017/10/21/2017/electron-multiple-session/"/>
    <id>http://guowenfh.github.io/2017/10/21/2017/electron-multiple-session/</id>
    <published>2017-10-21T14:51:51.000Z</published>
    <updated>2020-03-12T04:04:13.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经有很长一段时间没有产出博客了。<br>一. 是因为花了很多时间去专研业务，能够做到目前的基本业务流程理清，大致了然于胸（导致了一个问题：有人找我解决问题，我可能会先问一句，你的需求是什么？）<br>二. 确实是自己这一段时间确实懈怠了，每天上班回去就不想敲代码了，看看剧，看看小说，刷刷微博。虽然在组内有过一些分享，整理过一些东西，但是却没有将其在博客产出了。<br>这样的情况，让我明显的感觉到自己的成长速度相对于第一年成长的速度，慢了几个等级。这让我有一种危机感，于是克服这种懈怠，跳出舒适区，继续强健自己。重新回归吧。<br>最后。还是引用这个博客的描述：”兴趣遍地都是，专注和坚持才是真正稀缺的。”</p></blockquote><p>不多说了，开始吧。</p><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><blockquote><p>由于公司的项目内部调整，有幸接触 2 个星期的 electron 开发。（然后我又被拥抱变化了。。）实现了一个多账号的切换，并且同时对于多账号的聊天窗口做一个浏览器 tab 的集成的需求，这里对于接触到的知识点，做一个总结。以免完全忘记(忽略代码规范，我自己都看不下去)</p></blockquote><p><a href="https://wizardforcel.gitbooks.io/electron-doc/content/faq/electron-faq.html">electron-中文文档</a></p><span id="more"></span><p>在我加入项目之前，壳就已经搭好了，我只是在之上去开发。然而我接触时间太短，然后就撤离了，只能说一些我看到的和用到的部分。（ 其它存在的问题, 比如：安全，目前没有更多的精力去解决）</p><p>了解之后，最开始的项目搭建是使用的 <a href="https://github.com/electron/electron-quick-start">electron-quick-start</a> 来快速的构建出 一个 electron 客户端的项目。</p><p>由于项目需要快速迭代和试错。也没有使用大多数客户端项目将所有资源存在本地，然后再去更新本地资源的形式，而是在客户端暴露 sdk 的情况下 直接 load 了一个 远程地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;BrowserWindow&#125; = electron</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1280</span>,</span><br><span class="line">    height: <span class="number">768</span>,</span><br><span class="line">    icon: path.resolve(__dirname ,<span class="string">&#x27;./build/icon.png&#x27;</span>),</span><br><span class="line">    title:<span class="string">&#x27;客户端&#x27;</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      webSecurity: <span class="literal">false</span>,</span><br><span class="line">      allowRunningInsecureContent: <span class="literal">true</span>,</span><br><span class="line">      preload: path.resolve(path.join(__dirname, <span class="string">&#x27;./common/sdk.js&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">mainWindow.loadURL(<span class="string">&#x27;https://baidu.com&#x27;</span>,&#123;<span class="attr">extraHeaders</span>: <span class="string">&#x27;pragma: no-cache\n&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>SDK 部分，实际上也没有做太多的封装，直接就暴露出来了。<br>大概是下面这些</p><ul><li><a href="https://github.com/electron-userland/electron-json-storage">electron-json-storage</a></li><li><a href="https://github.com/mikaelbr/node-notifier">node-notifier</a></li><li><a href="https://github.com/visionmedia/superagent">superagent</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> storage = <span class="built_in">require</span>(<span class="string">&#x27;electron-json-storage&#x27;</span>);   <span class="comment">// 缓存</span></span><br><span class="line"><span class="keyword">const</span> notifier = <span class="built_in">require</span>(<span class="string">&#x27;node-notifier&#x27;</span>)           <span class="comment">// 通知功能</span></span><br><span class="line"><span class="keyword">const</span> charset = <span class="built_in">require</span>(<span class="string">&#x27;superagent-charset&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> request = charset(<span class="built_in">require</span>(<span class="string">&#x27;superagent&#x27;</span>));     <span class="comment">// HTTP</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于此项目 electron 暴露出来的内容，我能聊的大致就是这些了。至于图标，打包成可安装文件，客户端快捷键的设置，并没有太认真的去看，不过应该在网上多搜索，是能找到答案的。 <a href="https://github.com/electron/electron/issues">electron-github-issues</a> 实际上能解决绝大多数的问题。</p><h2 id="session-模块"><a href="#session-模块" class="headerlink" title="session 模块"></a>session 模块</h2><blockquote><p>关于 <a href="https://wizardforcel.gitbooks.io/electron-doc/content/api/session.html">electron session</a> 模块，就和文档中的描述一致，session 模块可以用来创建一个新的 Session 对象，然后 有 <code>session.fromPartition(partition)</code> 进行自定义的设置。<br>你也可以通过使用 webContents 的属性 session 来使用一个已有页面的 session (webContents 是 BrowserWindow 的属性.)</p></blockquote><p>在经过实际的测试发现，在主进程之外无法直接使用<code>electron.session</code> 来获取到 session 对象：<code>&#123; defaultSession: [Getter], fromPartition: [Function] &#125;</code></p><p>所以在最后，我只能是通过  webContents 中的 session 来处理。</p><p>当然就算是这样，也有很多解决方案，但是我目前使用了我认为最简单的一个。直接修改 本地所有的 cookies。</p><h3 id="在-BrowserWindow-中"><a href="#在-BrowserWindow-中" class="headerlink" title="在 BrowserWindow 中"></a>在 BrowserWindow 中</h3><p>在文档中发现 可以直接在用 BrowserWindow 是可以直接通过 webPreferences 参数来对于 session 进行最初的设置的。</p><ul><li><code>webPreferences</code> 参数是个对象，它的属性:<ul><li><code>session Session</code> - 设置界面 session. 而不是直接忽略 session 对象 , 也可用 partition 来代替, 它接受一个 partition 字符串. 当同时使用 session 和 partition , session 优先级更高. 默认使用默认 session .</li><li><code>partition String</code> - 通过 session 的 partition 字符串来设置界面 session. 如果 partition 以 persist: 开头, 这个界面将会为所有界面使用相同的 partition. 如果没有 persist: 前缀, 界面使用历史 session. 通过分享同一个 partition, 所有界面使用相同的 session. 默认使用默认 session.</li></ul></li></ul><h3 id="在-webview-中"><a href="#在-webview-中" class="headerlink" title="在 webview 中"></a>在 webview 中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">webview</span> <span class="attr">src</span>=<span class="string">&quot;https://github.com&quot;</span> <span class="attr">partition</span>=<span class="string">&quot;persist:github&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webview</span> <span class="attr">src</span>=<span class="string">&quot;http://electron.atom.io&quot;</span> <span class="attr">partition</span>=<span class="string">&quot;electron&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 webview 中同样支持 partition 的设置。规则同上。</p><p>但是除此之外 webview 也同样提供了一个方法 <code>&lt;webview&gt;.getWebContents()</code>去获取 到 webview 所属的 webContents。 这样的话，我们也可以直接使用它 session 的属性进行处理</p><!-- 但是我接手到的并不是一个全新的项目，也不能推倒重新来过，在做切换时，并不能从这里突破（登陆还是会用到的。）。 --><h2 id="店铺切换"><a href="#店铺切换" class="headerlink" title="店铺切换"></a>店铺切换</h2><h3 id="登陆窗口"><a href="#登陆窗口" class="headerlink" title="登陆窗口"></a>登陆窗口</h3><p>首先我们需要去创建出一个登陆窗口去让用户把账号给添加到目前的登陆流程中来。然后通过回调函数，将一个必要信息传到主窗口做登陆完成的处理（或者是使用 ipcMain EventEmitter 形式，最终只是需要拿到值。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个 登录 的窗口。</span></span><br><span class="line"><span class="comment">     * 用于 session 隔离</span></span><br><span class="line"><span class="comment">     * Promise 中有  &#123;partition,userinfo,cookies&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="variable">Promise</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createLoginWin</span>(<span class="params">partition</span>)</span>&#123;</span><br><span class="line">        partition = partition || <span class="string">`persist:<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> charset = <span class="built_in">require</span>(<span class="string">&#x27;superagent-charset&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> request = charset(<span class="built_in">require</span>(<span class="string">&#x27;superagent&#x27;</span>));     <span class="comment">// HTTP</span></span><br><span class="line">        <span class="keyword">let</span> BrowserWindow = <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.BrowserWindow;</span><br><span class="line">        <span class="keyword">let</span> presWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">            width: <span class="number">1280</span>,</span><br><span class="line">            height: <span class="number">768</span>,</span><br><span class="line">            title:<span class="string">&#x27;用户登陆&#x27;</span>,</span><br><span class="line">            webPreferences: &#123;</span><br><span class="line">              webSecurity: <span class="literal">false</span>,</span><br><span class="line">              allowRunningInsecureContent: <span class="literal">true</span>,</span><br><span class="line">              partition</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> webContents = presWindow.webContents;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resove,reject</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// webContents.openDevTools();</span></span><br><span class="line">            presWindow.loadURL(<span class="string">&#x27;http://taobao.com/#/login&#x27;</span>);</span><br><span class="line">            webContents.on(<span class="string">&quot;did-navigate-in-page&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 这里可以看情况进行参数的传递，获取制定的 cookies</span></span><br><span class="line">                webContents.session.cookies.get(&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,cookies</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                        presWindow.close(); <span class="comment">// 关闭登陆窗口</span></span><br><span class="line">                        <span class="keyword">return</span> reject(err);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 这一步并不是必需的。</span></span><br><span class="line">                    request</span><br><span class="line">                    .get(<span class="string">&#x27;http://taobao.com/userinfo&#x27;</span>)</span><br><span class="line">                    .query(&#123; <span class="attr">_</span>: <span class="built_in">Date</span>.now() &#125;) <span class="comment">// query string</span></span><br><span class="line">                    .set(<span class="string">&quot;Cookie&quot;</span>, cookies.map(<span class="function"><span class="params">item</span>=&gt;</span><span class="string">`<span class="subst">$&#123;item.name&#125;</span>=<span class="subst">$&#123;item.value&#125;</span>;`</span>).join(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">                    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</span><br><span class="line">                        presWindow.close();</span><br><span class="line">                        <span class="keyword">if</span>(err) &#123;<span class="keyword">return</span> reject(err);&#125;</span><br><span class="line">                        <span class="keyword">if</span>(!res || !res.body || !res.body.result !== <span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> reject(res.body)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">let</span> obj = &#123; partition,cookies,<span class="attr">userinfo</span>:res.body.data&#125;</span><br><span class="line">                        resove(obj);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于信息的存储的话，是使用了 electron-json-storage 将用户的值存储到本地。这里可以随意。</p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>上面只是创建了新用户登录的窗口。那么对于旧有的（目前登录）用户信息，做一个初始化同步存储下来的操作。（保持结构一致，（除了 <code>partition</code> 不存在之外））为了后续的 使用方便，可以封装几个对于当前窗口 cookies 操作的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookies =  &#123;</span><br><span class="line">    <span class="function"><span class="title">getCurrCookies</span>(<span class="params">params=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> currWin = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.getCurrentWindow();</span><br><span class="line">        <span class="keyword">let</span> currSession = currWin.webContents.session;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            currSession.cookies.get(<span class="built_in">Object</span>.assign(&#123;&#125;,params),<span class="function"><span class="keyword">function</span>(<span class="params">err,cookies</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> reject(err);&#125;</span><br><span class="line">                resove(cookies);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">removeCurrCookies</span>(<span class="params">cookies = []</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> currWin = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.getCurrentWindow();</span><br><span class="line">        <span class="keyword">let</span> currSession = currWin.webContents.session;</span><br><span class="line">        <span class="keyword">let</span> err = [];</span><br><span class="line">        <span class="keyword">let</span> apiCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            cookies.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                currSession.cookies.remove(<span class="string">`http://<span class="subst">$&#123;item.domain&#125;</span>`</span>,item.name ,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err)&#123;<span class="keyword">return</span> err.push(err);&#125;</span><br><span class="line">                    apiCount = apiCount + <span class="number">1</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">if</span>(err.length === apiCount)&#123;</span><br><span class="line">                    resove(&#123;<span class="attr">message</span>:<span class="string">&#x27;cookie 清除成功&#x27;</span>&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setCurrCookies</span>(<span class="params">cookies = []</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> currWin = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.getCurrentWindow();</span><br><span class="line">        <span class="keyword">let</span> currSession = currWin.webContents.session;</span><br><span class="line">        <span class="keyword">let</span> err = [];</span><br><span class="line">        <span class="keyword">let</span> apiCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            cookies.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                currSession.cookies.set(<span class="built_in">Object</span>.assign(&#123;&#125;,item,&#123;</span><br><span class="line">                    url:<span class="string">`http://<span class="subst">$&#123;item.domain&#125;</span>`</span>,</span><br><span class="line">                    name:item.name</span><br><span class="line">                &#125;),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                        <span class="keyword">return</span> err.push(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                    apiCount = apiCount + <span class="number">1</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">if</span>(err.length === apiCount)&#123;</span><br><span class="line">                    resove(&#123;<span class="attr">message</span>:<span class="string">&#x27;cookie 设置成功！&#x27;</span>&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这几个函数。结合我们上面，将用户登录信息保存下来的部分，切换店铺就变得异常简单了。</p><p>流程如下：</p><p>获取当前 –&gt; 清除当前 –&gt; 获取目标 –&gt; 设置当前 –&gt; 重新载入</p><h2 id="多-webview-聊天窗口"><a href="#多-webview-聊天窗口" class="headerlink" title="多 webview 聊天窗口"></a>多 webview 聊天窗口</h2><p>先来上一个截图。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fkq9cead1tj30l20aw75e.jpg"></p><p>在我的使用中，直接将聊天窗口创建出来，一个新的 BrowserWindow ，html 中会创建多个 webview</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openChatTool</span>(<span class="params">data=[]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 需要打开的聊天窗口集合，里面会有我们在上面存下来的信息</span></span><br><span class="line">    <span class="keyword">let</span> random = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">let</span> BrowserWindow = <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.BrowserWindow;</span><br><span class="line">    <span class="keyword">let</span> presWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">1280</span>,</span><br><span class="line">        height: <span class="number">768</span>,</span><br><span class="line">        title:<span class="string">&#x27;聊天窗口&#x27;</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">          webSecurity: <span class="literal">false</span>,</span><br><span class="line">          allowRunningInsecureContent: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// presWindow.webContents.openDevTools();</span></span><br><span class="line">    presWindow.loadURL(<span class="string">`http://<span class="subst">$&#123;location.host&#125;</span>/chat.html?v=<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>);</span><br><span class="line">    presWindow.webContents.on(<span class="string">&#x27;did-finish-load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用了 send 方法在线程中进行信息传递，在 chat.html 中 可以使用 ipcRenderer接受 如：electron.ipcRenderer.on(&#x27;chatList&#x27;,()=&gt;&#123;&#125;)</span></span><br><span class="line">        presWindow.webContents.send(<span class="string">&#x27;chatList&#x27;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>chat.html 中 tab 切换的部分在此直接略过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line">electron.ipcRenderer.on(<span class="string">&#x27;chatList&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="keyword">const</span> webview = <span class="built_in">document</span>.createElement(<span class="string">&#x27;webview&#x27;</span>);</span><br><span class="line">    webview.allowpopups = <span class="literal">true</span>;</span><br><span class="line">    webview.disablewebsecurity = <span class="literal">true</span>;</span><br><span class="line">    webview.className = index == <span class="number">0</span> ? <span class="string">&#x27;active&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 直接使用 之前存下来的 partition，是最简单的形式</span></span><br><span class="line">    <span class="comment">// 当然也可以不使用这个，在下面的事件中 session.cookies.set 将 cookie 设置进去</span></span><br><span class="line">    webview.partition = item.partition || <span class="string">`persist:<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>;</span><br><span class="line">    webview.src=<span class="string">&quot;http://chat.com&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(webview);</span><br><span class="line">    webview.addEventListener(<span class="string">&#x27;did-finish-load&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> webviewContents = webview.getWebContents();</span><br><span class="line">        <span class="keyword">if</span>(webview.getURL()==<span class="string">&#x27;http://chat.com/index&#x27;</span>)&#123;</span><br><span class="line">            webviewContents.webContents.session.cookies.get(&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,cookies</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 处理登录失效。重新登录的逻辑。还需要结合别的事件来处理</span></span><br><span class="line">                <span class="comment">// 这里可以直接拿到 webview 内的 session 信息</span></span><br><span class="line">                <span class="comment">// 代码略</span></span><br><span class="line">                <span class="comment">// 可以在外部插入代码</span></span><br><span class="line">                webview.executeJavaScript(<span class="string">`console.log(11)`</span>,<span class="function">()=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;insert dom success&#x27;</span>)&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样需求就搞定了，但是实际上我用到的只是非常少的一部分，并且完成的也不算好。 单单是一个 session 模块中的东西我也还有很多没有去详细的尝试和理解的。不过这个需求整体下来，感觉 electron 还是非常有趣的。只不过接触的时间还太短，没有挖掘出更多有好玩的东西，要是之后有了时间，可以考虑用他写一个自己的应用吧。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;已经有很长一段时间没有产出博客了。&lt;br&gt;一. 是因为花了很多时间去专研业务，能够做到目前的基本业务流程理清，大致了然于胸（导致了一个问题：有人找我解决问题，我可能会先问一句，你的需求是什么？）&lt;br&gt;二. 确实是自己这一段时间确实懈怠了，每天上班回去就不想敲代码了，看看剧，看看小说，刷刷微博。虽然在组内有过一些分享，整理过一些东西，但是却没有将其在博客产出了。&lt;br&gt;这样的情况，让我明显的感觉到自己的成长速度相对于第一年成长的速度，慢了几个等级。这让我有一种危机感，于是克服这种懈怠，跳出舒适区，继续强健自己。重新回归吧。&lt;br&gt;最后。还是引用这个博客的描述：”兴趣遍地都是，专注和坚持才是真正稀缺的。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不多说了，开始吧。&lt;/p&gt;
&lt;h2 id=&quot;基础介绍&quot;&gt;&lt;a href=&quot;#基础介绍&quot; class=&quot;headerlink&quot; title=&quot;基础介绍&quot;&gt;&lt;/a&gt;基础介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于公司的项目内部调整，有幸接触 2 个星期的 electron 开发。（然后我又被拥抱变化了。。）实现了一个多账号的切换，并且同时对于多账号的聊天窗口做一个浏览器 tab 的集成的需求，这里对于接触到的知识点，做一个总结。以免完全忘记(忽略代码规范，我自己都看不下去)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://wizardforcel.gitbooks.io/electron-doc/content/faq/electron-faq.html&quot;&gt;electron-中文文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="HTML" scheme="http://guowenfh.github.io/tags/HTML/"/>
    
    <category term="electron" scheme="http://guowenfh.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>FlexBox 布局详解</title>
    <link href="http://guowenfh.github.io/2017/05/31/2017/flexLayout/"/>
    <id>http://guowenfh.github.io/2017/05/31/2017/flexLayout/</id>
    <published>2017-05-31T14:52:54.000Z</published>
    <updated>2020-03-12T04:04:13.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很久没有写博客了，这里把之前学习 flex 布局的一篇笔记整理了一下。发布到博客上。赶一个五月的末班车吧。还是得坚持啊!!</p></blockquote><p>flex 弹性布局<br>FlexBox 可控制子元素:</p><ul><li>水平或垂直排成一行</li><li>控制子元素的对齐方式</li><li>控制子元素的高度／宽度</li><li>控制子元素的显示顺序</li><li>控制子元素是否折行</li></ul><p>** <code>display:flex;</code> 创建  Flexbox 元素 **<br>在 flex 布局中必须理解的概念就是区分主轴和辅轴(侧轴):<br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x85jz1oj21420ei0ty.jpg"></p><span id="more"></span><p>在项目中我们使用 <code>display:flex;</code> 创建  <code>Flexbox</code> 元素，那么该元素就成为了一个 <code>flex container</code>( 弹性的容器)。<br>其在<strong>文档流中的直接子元素</strong>将成为 <code>flex item</code>。<br> <code>flex item</code> 子元素<strong>在容器内 <strong>排列的方向称为</strong>主轴</strong>，跟主轴垂直的方向称为 <strong>辅轴</strong>。</p><h2 id="方向相关属性"><a href="#方向相关属性" class="headerlink" title="方向相关属性"></a>方向相关属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h3><ul><li>设置子元素排列方向 (其实也就是主轴的排列方向)</li><li>取值 <code>row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code></li><li>默认 <code>row</code>: </li></ul><p>其中不同的设置，效果大致如下 :<br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x85yqm6j21dc0fs761.jpg"></p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a><code>flex-wrap</code></h3><ul><li>元素在主轴方向排放时，能否换行</li><li>取值:<code>nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code></li><li>默认 <code>nowrap</code>，不换行</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*base css*/</span></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x88k4xfj21ci0koah7.jpg"></p><h3 id="合并属性-flex-flow-，-上面两个属性的缩写"><a href="#合并属性-flex-flow-，-上面两个属性的缩写" class="headerlink" title="合并属性: flex-flow ， 上面两个属性的缩写"></a>合并属性: <code>flex-flow</code> ， 上面两个属性的缩写</h3><ul><li><code>&lt;&#39;flex-direction&#39;&gt;</code> ||  <code>&lt;&#39;flex-wrap&#39;&gt;</code></li><li>默认:  <code>flex-flow: row nowrap;</code></li></ul><p>这里直接结合两个属性看就好。</p><h3 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h3><ul><li>指定摆放时的顺序，从小到大</li><li>取值:默认 0 ，(支持负值和正值)</li></ul><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x86pdw6j215c0eojv0.jpg"></p><h2 id="弹性相关属性，都是设置在子元素上的"><a href="#弹性相关属性，都是设置在子元素上的" class="headerlink" title="弹性相关属性，都是设置在子元素上的"></a>弹性相关属性，都是设置在子元素上的</h2><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h3><ul><li>设置 <code>flex item</code> 的初始宽／高</li><li>取值: <code>main-size</code> | <code>&lt;width&gt;</code></li><li>默认: <code>main-size</code>: 主轴方向的宽度 (根据 <code>flex-direction</code>设置，水平排列时，设置的是宽度；垂直排列时，设置的高度)</li></ul><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h3><ul><li>定义每一个子元素在盒子内的弹性</li><li><strong>拓展盒子剩余空间的能力</strong>(空间富余时)</li><li>取值: <code>&lt;number&gt;</code></li><li>取值:默认 0 ，整数小数都可</li><li>剩余空间的分配规则 : <code>flex-basis + flow-grow/sum(flow-grow)*remain</code> remain 表示多余的空间</li></ul><p>这里可以看到 只设置 <code>flex-basis</code> 相当与设置元素的 <code>width</code></p><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x87orwsj21oo0i6tdg.jpg"><br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x89zp9dj21pg0i8tdl.jpg"><br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x894rf9j21os0heq7w.jpg"></p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h3><ul><li><strong>定义元素收缩的能力</strong>(空间不足时)</li><li>取值: <code>&lt;number&gt;</code></li><li>取值 : 默认 1  ，平方(值为 0 时，不收缩)</li><li>不足空间收缩的规则 : <code>flex-basis + flow-grow/sum(flow-grow)*remain</code> remain 表示不足的空间 (负值)</li></ul><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x89licsj21jq0dm791.jpg"><br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x88lxkpj21ou0esdkp.jpg"><br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x8ab53yj21k00eadld.jpg"></p><h3 id="合并属性-flex"><a href="#合并属性-flex" class="headerlink" title="合并属性:  flex"></a>合并属性:  <code>flex</code></h3><ul><li><code>&lt;&#39;flex-grow&#39;&gt;</code> ||  <code>&lt;&#39;flex-shrink&#39;&gt;</code> ||  <code>&lt;&#39;flex-basis&#39;&gt;</code></li><li>默认:  <code>flex: 0 1 main-size;</code> 看上面</li></ul><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x8ahj86j21nm0jawjp.jpg"><br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x8bk20gj21oq0jqgqz.jpg"></p><h2 id="对齐-相关的属性"><a href="#对齐-相关的属性" class="headerlink" title="对齐 相关的属性"></a>对齐 相关的属性</h2><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h3><ul><li>设置子元素在主轴方向上的对其方式</li><li>取值: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code></li><li>默认 <code>flex-start</code> </li></ul><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x85umuij20u00wcwid.jpg"></p><p>例子:切换主轴方向时<br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x8bqzo7j214m0xcahf.jpg"></p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a><code>align-items</code></h3><ul><li>设置在辅轴上的对齐方式。</li><li>取值: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code></li><li>默认 <code>stretch</code> </li></ul><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x86vni3j20uc0xc78v.jpg"></p><h3 id="align-self-设置在子元素上"><a href="#align-self-设置在子元素上" class="headerlink" title="align-self 设置在子元素上"></a><code>align-self</code> 设置在子元素上</h3><ul><li>单独设置子元素在辅轴方向的对齐方式</li><li>取值: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code></li><li>默认 <code>stretch</code> </li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><code>align-content</code></h3><ul><li><strong>多行内容</strong> 设置在辅轴方向上，行的对齐方式</li><li><ul><li>取值: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> |  <code>space-around</code> |<code>stretch</code></li></ul></li><li>默认 <code>stretch</code>  拉伸</li></ul><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fg4x86wizij20ta0x2jww.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;很久没有写博客了，这里把之前学习 flex 布局的一篇笔记整理了一下。发布到博客上。赶一个五月的末班车吧。还是得坚持啊!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;flex 弹性布局&lt;br&gt;FlexBox 可控制子元素:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;水平或垂直排成一行&lt;/li&gt;
&lt;li&gt;控制子元素的对齐方式&lt;/li&gt;
&lt;li&gt;控制子元素的高度／宽度&lt;/li&gt;
&lt;li&gt;控制子元素的显示顺序&lt;/li&gt;
&lt;li&gt;控制子元素是否折行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** &lt;code&gt;display:flex;&lt;/code&gt; 创建  Flexbox 元素 **&lt;br&gt;在 flex 布局中必须理解的概念就是区分主轴和辅轴(侧轴):&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/82d12951gy1fg4x85jz1oj21420ei0ty.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="css" scheme="http://guowenfh.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML5常用标签分类</title>
    <link href="http://guowenfh.github.io/2017/04/21/2017/html5-label-category/"/>
    <id>http://guowenfh.github.io/2017/04/21/2017/html5-label-category/</id>
    <published>2017-04-21T15:45:12.000Z</published>
    <updated>2020-03-12T04:04:13.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章是很早之前的笔记，做了一些属性上的补充，现发布到博客中来</p></blockquote><p><a href="https://www.h5jun.com/post/html5-element-flowchart.html?utm_source=tuicool&utm_medium=referral">十年踪迹的博客：HTML5 元素选择流程图</a><br><img src="https://p3.ssl.qhimg.com/t01d712cd34f492117d.png" class="full-image" art="如何选择标签"/></p><span id="more"></span><p>HTML5基本介绍</p><p><strong>HTML5 设计思想</strong></p><ul><li>兼容已有内容</li><li>避免不必要的复杂性</li><li>解决现实的问题</li><li>优雅降级</li><li>尊重事实标准</li><li>用户－&gt;开发者－&gt;浏览器厂商－&gt;标准制定者－&gt;理论完美</li></ul><p><strong>语法</strong></p><ul><li>标签不区分大小写，推荐小写</li><li>空标签可以不闭合，比如 input / meta</li><li>属性不必引号，推荐双引号</li><li>某些属性值可以省略，比如 required,readonly</li></ul><hr><p>HTML5常用标签分类</p><h3 id="一-HTML文档标签"><a href="#一-HTML文档标签" class="headerlink" title="一. HTML文档标签"></a>一. HTML文档标签</h3><ol><li><code>&lt;!DOCTYPE&gt;</code>: 定义文档类型.</li><li><code>&lt;html&gt;</code>: 定义HTML文档.</li><li><code>&lt;head&gt;</code>: 定义文档的头部.(头部内包含)</li><li><code>&lt;meta&gt;</code>: 定义元素可提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词(由于规范没有规定关于 mete 中各种属性的强制定义，所以不同的浏览器都都可以通过 mete 来声明一些规则)<ul><li>参考：<a href="https://github.com/yisibl/blog/issues/1">移动端的头部标签</a></li><li><code>&lt;meta charset =&quot;UtF-8&quot;&gt;</code></li><li><code>&lt;meta name =&quot;keywords&quot; conten=&quot;关键词&quot;&gt;</code></li><li><code>&lt;meta name =&quot;description&quot; conten=&quot;页面介绍&quot;&gt;</code></li><li><code>&lt;meta name =&quot; viewport&quot; conten=&quot;initial-scale=1&quot;&gt;</code></li></ul></li><li><code>&lt;base&gt;</code>:定义页面上的所有链接规定默认地址或默认目标.</li><li><code>&lt;title&gt;</code>: 定义文档的标题.</li><li> <code>&lt;link&gt;</code>: 定义文档与外部资源的关系.</li><li> <code>&lt;style&gt;</code>:定义 HTML 文档样式信息.</li><li><code>&lt;body&gt;</code>: 定义文档的主体.(脚本在非必须情况时在主体内容最后)</li><li><code>&lt;script&gt;</code>: 定义客户端脚本，比如 JavaScript.</li><li><code>&lt;noscript&gt;</code>:定义在脚本未被执行时的替代内容.（文本）</li></ol><h3 id="二-布局标签-amp-语义化"><a href="#二-布局标签-amp-语义化" class="headerlink" title="二. 布局标签&amp;语义化"></a>二. 布局标签&amp;语义化</h3><p><img src="https://ws1.sinaimg.cn/large/82d12951gy1fevim1rbn6j20zq0tyjum.jpg"></p><ol><li><code>&lt;div&gt;</code>:定义块级元素.</li><li><code>&lt;span&gt;</code>:定义行业元素.</li><li><code>&lt;header&gt;</code>5[^footnote]:定义区段或页面的页眉.(头部)</li><li><code>&lt;footer&gt;</code>:定义区段或页面的页脚.(足部)</li><li><code>&lt;section&gt;</code>:定义文档中的区段.</li><li><code>&lt;article&gt;</code>:定义文章.（在<code>&lt;article&gt;</code>中也可以进行内容划分）<ul><li>  <img src="https://ws1.sinaimg.cn/large/82d12951gy1fevim24vmpj20n40lsgpn.jpg"></li></ul></li><li><code>&lt;aside&gt;</code>:定义页面内容之外的内容.</li><li><code>&lt;details&gt;</code>:定义元素的细节.</li><li><code>&lt;summary&gt;</code>:定义 <code>&lt;details&gt;</code> 元素可见的标题.</li><li><code>&lt;dialog&gt;</code>:定义对话框或窗口.</li><li><code>&lt;nav&gt;</code>:定义导航.</li><li><code>&lt;hgroup&gt;</code>:定义标题组</li></ol><h3 id="三-表格标签"><a href="#三-表格标签" class="headerlink" title="三. 表格标签"></a>三. 表格标签</h3><ol><li><p><code>&lt;table&gt;</code>:定义表格.</p><ul><li><code>border=1</code>定义边框</li></ul></li><li><p><code>&lt;caption&gt;</code>:定义标题.（规范：必须是 table 的第一个元素）</p></li><li><p><code>&lt;thead&gt;</code>:定义页眉.</p></li><li><p><code>&lt;tbody&gt;</code>:定义主体.</p></li><li><p><code>&lt;tfoot&gt;</code>:定义页脚.</p></li><li><p><code>&lt;th&gt;</code>:定义表头.</p></li><li><p><code>&lt;tr&gt;</code>:定义一行.</p></li><li><p><code>&lt;td&gt;</code>:定义单元格.</p><ul><li><code>rowspan=&quot;2&quot;</code>跨行（竖直）</li><li><code>colspan=&quot;2&quot;</code>跨列（水平）</li></ul></li><li><p><code>&lt;colgroup&gt;&lt;col class=&quot;&quot; span=&quot;2&quot;&gt;&lt;/colgroup&gt;</code>:列组,批量的给列做处理</p><h3 id="四-表单标签"><a href="#四-表单标签" class="headerlink" title="四. 表单标签"></a>四. 表单标签</h3></li><li><p><code>&lt;form&gt;</code>:定义表单.(表单包含在form标签中)</p><ul><li><code>novalidate</code>:禁用原生的验证规则</li><li>表单提交最好是绑定 submit 事件</li></ul></li><li><p><code>&lt;input&gt;</code>:定义输入域.</p><ul><li><code>name=&quot;username&quot;</code>：原生表单提交用于传输的 key 例：key1=value1&amp;key2=value2</li><li><code>placeholder=&quot;2-10位&quot;</code>：描述文字</li><li><code>minlength=&quot;2&quot;</code>最少（记录一下，一般这些还是走 js）</li><li><code>maxlength=&quot;10&quot;</code>：最多</li><li><code>required</code>：是否必填</li><li><code>pattern=&quot;1\d&#123;10&#125;&quot;</code>：正则表达式</li><li><code>type=&quot;text&quot;</code>：input 类型如 search/number/email等都是输入</li><li><code>readeonly</code></li><li><code>disabled</code></li></ul></li><li><p><code>&lt;textarea&gt;</code>:定义文本域.(多行)</p></li><li><p><code>&lt;label&gt;</code>:定义一个控制的标签.(input 元素的标注)</p><ul><li><code>for=&quot;abc&quot;</code>, abc 为一个 id=”abc”的标签</li><li>如果直接把 input 整个包在 label 中也可以有 for 的效果</li></ul></li><li><p><code>&lt;fieldset&gt;</code>:定义域.</p></li><li><p><code>&lt;legend&gt;</code>:定义域的标题.</p></li><li><p><code>&lt;select&gt;</code>:定义一个选择列表.</p><ul><li><code>name=&quot;aaaa&quot;</code>：原生表单提交用于传输的 key</li><li><code>size=&quot;3&quot;</code>:只展示几个</li><li><code>multiple</code>：是否开启多选</li></ul></li><li><p><code>&lt;optgroup&gt;</code>:定义选择组.</p></li><li><p><code>&lt;option&gt;</code>:定义下拉 列表的选项.</p></li><li><p><code>&lt;button&gt;</code>:定义按钮.</p><ul><li><code>type=&quot;submit&quot;</code>:默认的是 submit</li><li><code>type=&quot;button&quot;</code>：大部分时间都会手动设置</li><li><code>type=&quot;reset&quot;</code>：重置</li></ul></li><li><p><code>&lt;fieldset&gt;</code>:定义围绕表单中元素的边框.</p></li><li><p><code>&lt;legend&gt;</code>:定义 fieldset 元素的标题.</p></li><li><p><code>&lt;fieldset&gt;</code>:定义选项列表.与input 元素配合使用该元素，来定义 input 可能的值.</p></li><li><p><code>&lt;keygen&gt;</code>:定义表单的密钥对生成器字段.</p></li><li><p><code>&lt;output&gt;</code>:定义不同类型的输出，比如脚本的输出.</p></li></ol><h3 id="五-列表标签"><a href="#五-列表标签" class="headerlink" title="五. 列表标签"></a>五. 列表标签</h3><p>列表相关的标签，需要注意其嵌套规则</p><ol><li><code>&lt;ul&gt;</code>:定义无序列表.</li><li><code>&lt;ol&gt;</code>:定义有序列表.<ul><li>属性 <code>start＝&quot;1&quot;</code> 表示开始位置</li></ul></li><li><code>&lt;li&gt;</code>:定义列表项.</li><li><code>&lt;dl&gt;</code>:定义自定义列表.</li><li><code>&lt;dt&gt;</code>:定义自定义列表项.</li><li><code>&lt;dd&gt;</code>:定义自定义的描述.</li></ol><h3 id="六-图像-amp-链接标签"><a href="#六-图像-amp-链接标签" class="headerlink" title="六. 图像&amp;链接标签"></a>六. 图像&amp;链接标签</h3><ol><li><code>&lt;img&gt;</code>:定义图像.<ul><li><code>alt=&quot;替代文字&quot;</code>：必须加！</li><li><code>height=&quot;200&quot; width=&quot;300&quot;</code>，可用 css 指定</li><li>不指定宽高：原图大小显示</li><li>指定宽度：按比例缩放到指定宽度</li><li>指定高度：按比较缩放到指定高度</li><li>指定宽高：强制按指定宽高显示</li></ul></li><li><code>&lt;a&gt;</code>:定义超链接.<ul><li><code>href=&quot;url&quot;</code>在这里链接有多种形式</li><li>省略协议：<code>href=&quot;//baidu.com&quot;</code>，自动根据当前页面协议补充</li><li>省略协议和host(同时支持相对与绝对路径):<code>href=&quot;/index.html&quot;</code></li><li>页面内链接（锚点）：<code>href=&quot;#test&quot;</code>会找到页面中id 或者name 为test 的元素</li><li>链接目标：<code>target=&quot;_self&quot;</code>（当前窗口）<code>_blank</code>(新窗口) <code>abc</code>(开一个自定义窗口名称)</li></ul></li><li><code>&lt;map&gt;</code>:定义图像映射。</li><li><code>&lt;area&gt;</code>:定义图像地图内部的区域.</li><li><code>&lt;figure&gt;</code>:定义媒介内容的分组.（图表，图片，一段代码等）描述<code>&lt;img&gt;</code>内容等。</li><li><code>&lt;figcaption&gt;</code>:定义 <code>&lt;figure&gt;</code> 元素的标题.</li></ol><h3 id="七-音频-视频"><a href="#七-音频-视频" class="headerlink" title="七. 音频/视频"></a>七. 音频/视频</h3><ol><li><code>&lt;audio&gt;</code>:定义声音内容.</li><li><code>&lt;source&gt;</code>:定义媒介源.</li><li><code>&lt;track&gt;</code>:定义用在媒体播放器中的文本轨道.</li><li><code>&lt;video&gt;</code>:定义视频.</li></ol><h3 id="八-框架标签"><a href="#八-框架标签" class="headerlink" title="八. 框架标签"></a>八. 框架标签</h3><ol><li><code>&lt;iframe&gt;</code>:内联框架.</li></ol><h3 id="九-格式标签"><a href="#九-格式标签" class="headerlink" title="九.格式标签"></a>九.格式标签</h3><h4 id="1-文章标签"><a href="#1-文章标签" class="headerlink" title="1. 文章标签"></a>1. 文章标签</h4><ol><li><p><code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>:定义 HTML 标题.</p></li><li><p><code>&lt;p&gt;</code>:定义段落.</p></li><li><p><code>&lt;br&gt;</code>:定义换行.</p></li><li><p><code>&lt;hr&gt;</code>:定义水平线.</p></li><li><p><code>&lt;bdo&gt;</code>:定义文字方向.</p></li><li><p><code>&lt;pre&gt;</code>:定义预格式文本.保留换行等格式</p></li><li><p><code>&lt;abbr&gt;</code>:定义缩写.</p></li><li><p><code>&lt;address&gt;</code>:定义文档作者或拥有者的联系信息.</p></li><li><p><code>&lt;ins&gt;</code>:定义被插入文本.（比如博客中时效性的语句）</p></li><li><p><code>&lt;del&gt;</code>:定义被删除文本.</p></li><li><p><code>&lt;time&gt;</code>:定义日期/时间.</p></li><li><p><code>&lt;wbr&gt;</code>:定义虚拟的空格换行（例如长段的url）</p><h4 id="2-短语元素标签"><a href="#2-短语元素标签" class="headerlink" title="2. 短语元素标签"></a>2. 短语元素标签</h4></li><li><p><code>&lt;dfn&gt;</code>:定义定义项目.</p></li><li><p><code>&lt;code&gt;</code>:定义代码（长短都可）</p></li><li><p><code>&lt;samp&gt;</code>:定义计算机代码样本.</p></li><li><p><code>&lt;kbd&gt;</code>:定义键盘文本.</p></li><li><p><code>&lt;var&gt;</code>:定义文本的变量部分.</p></li><li><p><code>&lt;sup&gt;</code>:定义上标文本.</p></li><li><p><code>&lt;sub&gt;</code>:定义下标文本.</p></li><li><p><code>&lt;cite&gt;</code>:定义引用.（标题/章节/书名）等</p></li><li><p><code>&lt;blockguote&gt;</code>:定义长的引用.</p><ul><li>属性：<code>cite=&quot;url&quot;</code> 表示引用来源</li></ul></li><li><p><code>&lt;q&gt;</code>:定义短的引用.（一句话等）</p></li></ol><h4 id="3-字体样式标签"><a href="#3-字体样式标签" class="headerlink" title="3. 字体样式标签"></a>3. 字体样式标签</h4><ol><li><code>&lt;em&gt;</code>:定义强调文本.（从一句话中突出某个词语）</li><li> <code>&lt;strong&gt;</code>:定义语气更为强烈的强调文本.（重要性，严重性和紧急性）</li><li><code>&lt;i&gt;</code>:显示斜体文本效果.（换一种语调去说已句话时，比如其他语言翻译，对话中的旁白）</li><li><code>&lt;b&gt;</code>:呈现粗体文本效果.（将词语从视觉上和其他部分区分，比如一篇论文摘要中的关键词）</li><li><code>&lt;big&gt;</code>:呈现大号字体效果.</li><li><code>&lt;small&gt;</code>:呈现小号字体效果.</li><li><code>&lt;mark&gt;</code>:定义有记号的文本.（和用户当前行为相关的突出，比如在搜索中匹配到的次，或者一部分内容需要在后面引用时）</li></ol><h3 id="十-其它"><a href="#十-其它" class="headerlink" title="十. 其它"></a>十. 其它</h3><ol><li><code>&lt;canvas&gt;</code>:定义图形容器，必须使用脚本来绘制图形。</li><li><code>&lt;meter&gt;</code>:定义预定义范围内的度量.</li><li><code>&lt;progress&gt;</code>:定义任何类型的任务的进度.</li></ol><h3 id="十一-一些-HTML全局属性"><a href="#十一-一些-HTML全局属性" class="headerlink" title="十一. 一些 HTML全局属性"></a>十一. 一些 HTML全局属性</h3><ul><li>accesskey：键盘快捷键</li><li>id</li><li>class</li><li>style</li><li>title</li><li>hidden：标签隐藏</li><li>lang：语言类型:’en’,’zh-CN’</li><li>dir:文本排列方向</li><li>tabindex</li><li>contenteditable：内容编辑</li><li>spellcheck:拼写检查</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;文章是很早之前的笔记，做了一些属性上的补充，现发布到博客中来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.h5jun.com/post/html5-element-flowchart.html?utm_source=tuicool&amp;utm_medium=referral&quot;&gt;十年踪迹的博客：HTML5 元素选择流程图&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://p3.ssl.qhimg.com/t01d712cd34f492117d.png&quot; class=&quot;full-image&quot; art=&quot;如何选择标签&quot;/&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术" scheme="http://guowenfh.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="HTML" scheme="http://guowenfh.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>ES6 简单特性学习记录</title>
    <link href="http://guowenfh.github.io/2017/03/01/2017/es6-base-features-note/"/>
    <id>http://guowenfh.github.io/2017/03/01/2017/es6-base-features-note/</id>
    <published>2017-03-01T15:26:07.000Z</published>
    <updated>2020-03-12T04:04:13.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量定义的新方式：let-const"><a href="#变量定义的新方式：let-const" class="headerlink" title="变量定义的新方式：let/ const"></a>变量定义的新方式：<code>let</code>/ <code>const</code></h2><p><strong><code>let</code> 特性：</strong></p><ol><li>不允许重复声明</li><li>没有变量提升（预解析）</li><li>块级作用域（一对 <code>&#123;&#125;</code> 包括的区域称为一个代码块，<code>let</code> 声明的变量只在该代码块起作用）</li></ol><p>例子1 ：简单的打印数据</p><p>使用 <code>var</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span> ; i++ )&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(i)) <span class="comment">// 执行10次，全都打印 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>let</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span> ; i++ )&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(i)) <span class="comment">// 执行10次，打印 0 - 9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前我们要实现这样的打印，必须使用闭包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(j)) <span class="comment">// 执行10次，打印 0 - 9</span></span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>例子二：在网页中常常会有切换 tab ，展示对应的信息的需求，我们使用 <code>var</code> 来处理时，常常使用的自定义属性，来保存点击的索引。<code>btns[i].index=i</code>。用于找到对应的元素。：</p><p>html模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;<span class="attribute">display</span>:none&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.show</span>&#123;<span class="attribute">display</span>:block;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;<span class="attribute">background</span>:red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>22223<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>33333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span> ;i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].index=i</span><br><span class="line">    btns[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span> ;j&lt;btns.length;j++)&#123;</span><br><span class="line">            btns[j].className=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            divs[j].className=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.className=<span class="string">&#x27;active&#x27;</span></span><br><span class="line">        divs[<span class="built_in">this</span>.index].className=<span class="string">&#x27;show&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>let</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span> ;i&lt;btns.length;i++)&#123;</span><br><span class="line">    <span class="comment">/*可以看到这里少了保存的索引的操作*/</span></span><br><span class="line">    btns[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span> ;j&lt;btns.length;j++)&#123;</span><br><span class="line">            btns[j].className=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            divs[j].className=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.className=<span class="string">&#x27;active&#x27;</span></span><br><span class="line">        divs[i].className=<span class="string">&#x27;show&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>const</code></strong> 除了具备上述 <code>let</code> 的特性外，还有自己的一个特性：<strong>定义之后的值，是固定不变不能被修改的</strong>。</p><p>值得注意的是下面这两种情况是不会报错的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> a = &#123;<span class="attr">value</span>:<span class="number">1</span>&#125;</span><br><span class="line">    a.value = <span class="number">2</span></span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// &#123;value:2&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    b.push(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">// [1,2,3,4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>ES6 允许按照一定的模式，从数组和对象中提取值，这样就称为解构</p><p>数组：按照对应的顺序解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">    <span class="keyword">var</span> [a,b,c] = arr</span><br><span class="line">    <span class="comment">// a : [1,2,3]</span></span><br><span class="line">    <span class="comment">// b : [4,5,6]</span></span><br><span class="line">    <span class="comment">// c : [7,8,9]</span></span><br><span class="line">    <span class="comment">// 用法1</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">    [y,x] = [x,y]</span><br><span class="line">    <span class="built_in">console</span>.log(x,y) <span class="comment">// 2 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象按照对应的名称一一对应进行解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;</span><br><span class="line">        get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;get&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        value:<span class="number">1</span>,</span><br><span class="line">        data:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        str:<span class="string">&#x27;string&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> &#123;str,get,data&#125; = obj</span><br><span class="line">    <span class="built_in">console</span>.log(str) <span class="comment">// string</span></span><br><span class="line">    <span class="built_in">console</span>.log(get()) <span class="comment">//get</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// [1,2,3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>模板字符串 是增强版的字符串，使用反引号（```）作为标识 。可以当做普通字符串使用，也可以用来定义多行字符串（会保留换行）。或者在字符串中嵌入变量。</p><p>在模板字符串，需要引用变量使用 <code>$&#123;变量名&#125;</code> 的形式。在 <code>&#123;&#125;</code>可以进行运算，也可以引用对象属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;xiaoming&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">19</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span> ,my age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">    <span class="built_in">console</span>.log(str) <span class="comment">//&quot;my name is xiaoming ,my age is 19&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><code>Array.from(arrayLike[, mapFn[, thisArg]])</code></p><ul><li><code>arrayLike</code> : 想要转换成真实数组的类数组对象或可遍历对象。</li><li><code>mapFn</code> : 可选参数，如果指定了该参数，则最后生成的数组会经过该函数的加工处理后再返回。</li><li><code>thisArg</code> : 可选参数，执行 mapFn 函数时 this 的值。方法用于将两类对象转为真正的数组：类似数组的对象和可遍历的对象（包括 ES6 新增的数据结构 Set 和 Map ）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// NodeList对象</span></span><br><span class="line">    <span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    <span class="built_in">Array</span>.from(ps);</span><br><span class="line">    <span class="comment">// 将可迭代对象（Set 对象）转换成数组</span></span><br><span class="line">    <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;foo&quot;</span>, <span class="built_in">window</span>]));       <span class="comment">// [&quot;foo&quot;, window]</span></span><br><span class="line">    <span class="comment">// 使用 map 函数转换数组元素</span></span><br><span class="line">    <span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x);      <span class="comment">// [2, 4, 6]</span></span><br><span class="line">    <span class="comment">// 将类数组对象（arguments）转换成数组</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);                            <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在这之前，我们要转类数组对象，只能用这样的形式: <code>[].slice.call(ps)</code></p><p>当然或许你根本不需要转，因为我们有 <code>for of</code> 了,只要有遍历接口的类型，它就可以进行遍历<br>（<code>Set</code>,<code>String</code>,<code>Array</code>,<code>NodeList</code>等等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// NodeList对象</span></span><br><span class="line">    <span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> ps)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当然你可能同样需要下标： `arr.keys()`,`arr.values()`,`arr.entries()`</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [i,item] <span class="keyword">of</span> ps.entries())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i,item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Object.assign()</code>：拷贝源对象自身的可枚举的属性到目标对象身上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">    <span class="built_in">console</span>.log(copy); <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是， <code>Object.assign()</code>执行的是浅拷贝。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = &#123; <span class="attr">b</span>: &#123;<span class="attr">c</span>:<span class="number">4</span>&#125; , <span class="attr">d</span>: &#123; <span class="attr">e</span>: &#123;<span class="attr">f</span>:<span class="number">1</span>&#125;&#125; &#125;</span><br><span class="line">    <span class="keyword">let</span> g = <span class="built_in">Object</span>.assign(&#123;&#125;,a)</span><br><span class="line">    g.d.e = <span class="number">32</span> <span class="comment">// 设置 g.d.e 为 32</span></span><br><span class="line">    <span class="built_in">console</span>.log(g) <span class="comment">// &#123;&quot;b&quot;:&#123;&quot;c&quot;:4&#125;,&quot;d&quot;:&#123;&quot;e&quot;:32&#125;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// &#123;&quot;b&quot;:&#123;&quot;c&quot;:4&#125;,&quot;d&quot;:&#123;&quot;e&quot;:32&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你需要的不是合并，而只是普通<code>json</code>对象的复制，建议使用 <code>JSON.parse(JSON.stringify(a))</code>，这样不会有上面的副作用产生。</p><p>函数参数默认值。<strong>定义默认值得参数必须是尾参数，因为函数形参定义默认值后该参数可以被忽略</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b=<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;a,b&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.info(fn(<span class="number">1</span>)) <span class="comment">//&#123;a: 1, b: 2&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rest</code>参数：用于获取获取函数的多余参数。与参数默认值一样，必须为尾参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(args)</span><br><span class="line">    &#125;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) <span class="comment">// [3, 4, 5, 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展运算符<code>...</code>：它好比 <code>rest</code> 参数的逆运算。可以将一个数组转为用逗号分隔的参数序列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更好的 apply 方法，例如我们在算最大值的时候：</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr))</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="built_in">Math</span>.max(...arr)) <span class="comment">// 使用扩展运算符</span></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)) <span class="comment">// 最终都会被解析成这样</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当然还能这样用</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> arr = [...str,<span class="number">4</span>,<span class="number">5</span>] <span class="comment">// [&quot;s&quot;, &quot;t&quot;, &quot;r&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;, 4, 5]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数 <code>Arrow Functions</code>：箭头函数并不是用来替代现有函数而出现的，并且也无法替代。它是用来作为回调函数使用的，主要是为了简化回调函数的写法。<br>主要有三个特性：</p><ol><li>箭头函数自身没有 <code>this</code> 。函数内的 <code>this</code> 指向箭头函数 <strong>定义时所在的对象</strong> ，而不是使用时所在的对象。</li><li>箭头函数内部，不存在 <code>arguments</code> 对象</li><li>不可以当作构造函数，不可以使用 <code>new</code> 指令。</li></ol><p>简单用法，简化回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 我们都知道数组的 sort 并不是根据数值大小来排序的，需要排序时，要通过回调函数的形式来确定排序方式</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">    arr.sort() <span class="comment">// [10, 7, 8, 9]</span></span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b&#125;) <span class="comment">// [7, 8, 9, 10]</span></span><br><span class="line">    arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a - b ) <span class="comment">// 箭头函数简化。当仅有一条语句时，有一个隐式的 return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有 <code>arguments</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function">(<span class="params">a,b,c</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a,b,c)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">// 1 2 3</span></span><br><span class="line">    <span class="comment">// Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要在对象的方法中使用箭头函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">window</span>.name=<span class="string">&#x27;window&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name:<span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">        getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.getName() <span class="comment">// obj</span></span><br><span class="line">    <span class="keyword">var</span> getName = obj.getName</span><br><span class="line">    getName() <span class="comment">// window， this 总是指向调用者</span></span><br><span class="line">    <span class="comment">//-----------------</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name:<span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">        getName: <span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.getName() <span class="comment">// window</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        这里由于对象 a，并不能构成一个作用域。所以会再往上达到全局作用域，所以 this 指向 window..</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;变量定义的新方式：let-const&quot;&gt;&lt;a href=&quot;#变量定义的新方式：let-const&quot; class=&quot;headerlink&quot; title=&quot;变量定义的新方式：let/ const&quot;&gt;&lt;/a&gt;变量定义的新方式：&lt;code&gt;let&lt;/code&gt;/ &lt;code&gt;const&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;let&lt;/code&gt; 特性：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不允许重复声明&lt;/li&gt;
&lt;li&gt;没有变量提升（预解析）&lt;/li&gt;
&lt;li&gt;块级作用域（一对 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 包括的区域称为一个代码块，&lt;code&gt;let&lt;/code&gt; 声明的变量只在该代码块起作用）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例子1 ：简单的打印数据&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ; i++ )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)) &lt;span class=&quot;comment&quot;&gt;// 执行10次，全都打印 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用 &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ; i++ )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)) &lt;span class=&quot;comment&quot;&gt;// 执行10次，打印 0 - 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之前我们要实现这样的打印，必须使用闭包：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;j&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;()=&amp;gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(j)) &lt;span class=&quot;comment&quot;&gt;// 执行10次，打印 0 - 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS深度学习" scheme="http://guowenfh.github.io/categories/JS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="http://guowenfh.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>一张图学习 ES6 中的 React 生命周期与流程</title>
    <link href="http://guowenfh.github.io/2017/02/05/2017/es6-react-life-cycle/"/>
    <id>http://guowenfh.github.io/2017/02/05/2017/es6-react-life-cycle/</id>
    <published>2017-02-05T08:44:07.000Z</published>
    <updated>2020-03-12T04:04:13.273Z</updated>
    
    <content type="html"><![CDATA[<p>如题。</p><p>一张图学习 ES6 中的 React 生命周期与流程。<br><img src="https://ws1.sinaimg.cn/large/82d12951gy1fj405g3bdkj20z1152af1.jpg" class="full-image" art="ES6中的React生命周期与流程"/></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题。&lt;/p&gt;
&lt;p&gt;一张图学习 ES6 中的 React 生命周期与流程。&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/82d12951gy1fj405g3bdkj20z1152af1.jpg&quot; class=&quot;full-image&quot; art=&quot;ES6中的React生命周期与流程&quot;/&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="JS深度学习" scheme="http://guowenfh.github.io/categories/JS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JS" scheme="http://guowenfh.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="http://guowenfh.github.io/tags/ES6/"/>
    
    <category term="React" scheme="http://guowenfh.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>2017，一切才刚刚开始。</title>
    <link href="http://guowenfh.github.io/2016/12/31/annual-report-2016/"/>
    <id>http://guowenfh.github.io/2016/12/31/annual-report-2016/</id>
    <published>2016-12-31T15:22:39.000Z</published>
    <updated>2020-03-12T04:04:13.286Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年结束，明天就是2017了，这一年做了很多事：实习、毕业、工作。广州、丽江、重庆、北京、长沙、杭州、走了5个城市。开心、懊恼、苦涩各种心境。从一个编程的门外汉真正成为了一个初级前端开发工程师。也算是人生又一个新的起点吧。</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>先说说博客，从第一篇博客开始到现在一年零一个月了。一共 50 篇，博客总字数为：338202，产量不算高。不过值得高兴的是一年下来总流量量有 <code>15W</code>，应该还算不错吧。不仅是对自己学习的一个记录，应该也帮助到了不少人。终于把域名买了 <a href="http://blog.guowenfh.com/">blog.guowenfh.com</a></p><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgw1fbab295cyqj31kw1hah2h.jpg" alt="博客访问统计"></p><span id="more"></span><p>下面自我分析一下：</p><ol><li>内容：大多数是一些前端技术学习的笔记，也有寥寥几篇的摘抄和自我思考。在实际项目和代表编写过程中的积累根本没有，得好好加强。</li><li>时间：博客基本上有很明确的时间区分，偶尔一个月发个四五篇，然后就沉寂几个月，工作的区间内也很少有博客，没有稳定的输出时间。</li></ol><p>需要改进的点：在完成项目编写代码的过程中多积累，多总结。把一些别人的优点或者不够优雅的地方都做一个记录，想想为什么要这样做而不是那样做。然后不能一阵一阵的热情，需要多投入！</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><img src="https://ww3.sinaimg.cn/large/006tKfTcgw1fbab18w6evj315w0tyjxl.jpg" alt="GitHub"></p><p>今年在 GitHub 上并没有一个特别拿得出手的开源项目，不过之前写的 <code>vue-webapck</code> 基础介绍教程居然能拿到160星，让我很惊讶，也让我更加想去为社区贡献一点自己的东西。正好公司要跨入 <code>react</code> 技术栈了，第一步先用它写个小项目吧。之后尝试去给出一些 <code>Pull requests</code></p><h2 id="关于计划"><a href="#关于计划" class="headerlink" title="关于计划"></a>关于计划</h2><p>在今年年初，自己给自己定了几个小目标，内容之前在 <a href="https://bolg.guowenfh.com/2016/07/03/thoughtReport-2016-07-03/">思想汇报</a>中也有提到，除了书只读了10多本之外，其他都算是实现了吧，至少来说不后悔。<br>2017 年的具体规划没想好，但也就那些吧，多沟通，多看书，去年一年30本的量没达到，今年需要努力把阅读习惯培养出来！<br>保持这种饥饿感，保持一种初学者的心态，坚持去坚持。</p><hr><p>毕业出来工作五个多月了，在工作之后感觉还是成长了很多，也越来越相信编程更多的是考验人的解决问题的能力，而不是局限于编程语言，所以新的一年需要多锻炼一下自己解决工程的能力，开始于前端，但不止前端。</p><p>这篇没有什么章法的博客到这就结束了，没有很多的个人思考，更多的是在写的过程中回忆了一下一年间的发生种种，这样的回顾也是一种收获吧。</p><p>凭什么要奋发图强? “凭自己。”</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一年结束，明天就是2017了，这一年做了很多事：实习、毕业、工作。广州、丽江、重庆、北京、长沙、杭州、走了5个城市。开心、懊恼、苦涩各种心境。从一个编程的门外汉真正成为了一个初级前端开发工程师。也算是人生又一个新的起点吧。&lt;/p&gt;
&lt;h2 id=&quot;博客&quot;&gt;&lt;a href=&quot;#博客&quot; class=&quot;headerlink&quot; title=&quot;博客&quot;&gt;&lt;/a&gt;博客&lt;/h2&gt;&lt;p&gt;先说说博客，从第一篇博客开始到现在一年零一个月了。一共 50 篇，博客总字数为：338202，产量不算高。不过值得高兴的是一年下来总流量量有 &lt;code&gt;15W&lt;/code&gt;，应该还算不错吧。不仅是对自己学习的一个记录，应该也帮助到了不少人。终于把域名买了 &lt;a href=&quot;http://blog.guowenfh.com/&quot;&gt;blog.guowenfh.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tKfTcgw1fbab295cyqj31kw1hah2h.jpg&quot; alt=&quot;博客访问统计&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://guowenfh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="思想汇报" scheme="http://guowenfh.github.io/tags/%E6%80%9D%E6%83%B3%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
</feed>
